[{"name":"protected AssertionError expectFailure(SimpleSubjectBuilderCallback<S, T> assertionCallback)","description":"io.spine.testing.SubjectTest.expectFailure","location":"testlib/io.spine.testing/-subject-test/expect-failure.html","searchKeys":["expectFailure","protected AssertionError expectFailure(SimpleSubjectBuilderCallback<S, T> assertionCallback)","io.spine.testing.SubjectTest.expectFailure"]},{"name":"protected ReflectiveBuilder<T> setResultClass(Class<T> resultClass)","description":"io.spine.testing.ReflectiveBuilder.setResultClass","location":"testlib/io.spine.testing/-reflective-builder/set-result-class.html","searchKeys":["setResultClass","protected ReflectiveBuilder<T> setResultClass(Class<T> resultClass)","io.spine.testing.ReflectiveBuilder.setResultClass"]},{"name":"protected S assertWithSubjectThat(T actual)","description":"io.spine.testing.SubjectTest.assertWithSubjectThat","location":"testlib/io.spine.testing/-subject-test/assert-with-subject-that.html","searchKeys":["assertWithSubjectThat","protected S assertWithSubjectThat(T actual)","io.spine.testing.SubjectTest.assertWithSubjectThat"]},{"name":"protected abstract Constructor<T> constructor()","description":"io.spine.testing.ReflectiveBuilder.constructor","location":"testlib/io.spine.testing/-reflective-builder/constructor.html","searchKeys":["constructor","protected abstract Constructor<T> constructor()","io.spine.testing.ReflectiveBuilder.constructor"]},{"name":"protected abstract Factory<S, T> subjectFactory()","description":"io.spine.testing.SubjectTest.subjectFactory","location":"testlib/io.spine.testing/-subject-test/subject-factory.html","searchKeys":["subjectFactory","protected abstract Factory<S, T> subjectFactory()","io.spine.testing.SubjectTest.subjectFactory"]},{"name":"protected final Class<? extends Object> loggingClass()","description":"io.spine.testing.logging.LoggingTest.loggingClass","location":"testlib/io.spine.testing.logging/-logging-test/logging-class.html","searchKeys":["loggingClass","protected final Class<? extends Object> loggingClass()","io.spine.testing.logging.LoggingTest.loggingClass"]},{"name":"protected final Class<C> subject()","description":"io.spine.testing.ClassTest.subject","location":"testlib/io.spine.testing/-class-test/subject.html","searchKeys":["subject","protected final Class<C> subject()","io.spine.testing.ClassTest.subject"]},{"name":"protected final Level level()","description":"io.spine.testing.logging.LoggingTest.level","location":"testlib/io.spine.testing.logging/-logging-test/level.html","searchKeys":["level","protected final Level level()","io.spine.testing.logging.LoggingTest.level"]},{"name":"protected final Level previousLevel()","description":"io.spine.testing.logging.LoggingTest.previousLevel","location":"testlib/io.spine.testing.logging/-logging-test/previous-level.html","searchKeys":["previousLevel","protected final Level previousLevel()","io.spine.testing.logging.LoggingTest.previousLevel"]},{"name":"protected final LoggingAssertions assertLog()","description":"io.spine.testing.logging.LoggingTest.assertLog","location":"testlib/io.spine.testing.logging/-logging-test/assert-log.html","searchKeys":["assertLog","protected final LoggingAssertions assertLog()","io.spine.testing.logging.LoggingTest.assertLog"]},{"name":"protected final Visibility minimalStaticMethodVisibility()","description":"io.spine.testing.ClassTest.minimalStaticMethodVisibility","location":"testlib/io.spine.testing/-class-test/minimal-static-method-visibility.html","searchKeys":["minimalStaticMethodVisibility","protected final Visibility minimalStaticMethodVisibility()","io.spine.testing.ClassTest.minimalStaticMethodVisibility"]},{"name":"protected final void assertFinal()","description":"io.spine.testing.ClassTest.assertFinal","location":"testlib/io.spine.testing/-class-test/assert-final.html","searchKeys":["assertFinal","protected final void assertFinal()","io.spine.testing.ClassTest.assertFinal"]},{"name":"protected final void assertHasPrivateParameterlessCtor()","description":"io.spine.testing.ClassTest.assertHasPrivateParameterlessCtor","location":"testlib/io.spine.testing/-class-test/assert-has-private-parameterless-ctor.html","searchKeys":["assertHasPrivateParameterlessCtor","protected final void assertHasPrivateParameterlessCtor()","io.spine.testing.ClassTest.assertHasPrivateParameterlessCtor"]},{"name":"protected final void interceptLogging()","description":"io.spine.testing.logging.LoggingTest.interceptLogging","location":"testlib/io.spine.testing.logging/-logging-test/intercept-logging.html","searchKeys":["interceptLogging","protected final void interceptLogging()","io.spine.testing.logging.LoggingTest.interceptLogging"]},{"name":"protected final void restoreLogging()","description":"io.spine.testing.logging.LoggingTest.restoreLogging","location":"testlib/io.spine.testing.logging/-logging-test/restore-logging.html","searchKeys":["restoreLogging","protected final void restoreLogging()","io.spine.testing.logging.LoggingTest.restoreLogging"]},{"name":"protected void ClassTest(Class<C> subject)","description":"io.spine.testing.ClassTest.ClassTest","location":"testlib/io.spine.testing/-class-test/-class-test.html","searchKeys":["ClassTest","protected void ClassTest(Class<C> subject)","io.spine.testing.ClassTest.ClassTest"]},{"name":"protected void ClassTest(Class<C> subject, Visibility minimalStaticMethodVisibility)","description":"io.spine.testing.ClassTest.ClassTest","location":"testlib/io.spine.testing/-class-test/-class-test.html","searchKeys":["ClassTest","protected void ClassTest(Class<C> subject, Visibility minimalStaticMethodVisibility)","io.spine.testing.ClassTest.ClassTest"]},{"name":"protected void LoggingTest(Class<? extends Object> loggingClass, Level level)","description":"io.spine.testing.logging.LoggingTest.LoggingTest","location":"testlib/io.spine.testing.logging/-logging-test/-logging-test.html","searchKeys":["LoggingTest","protected void LoggingTest(Class<? extends Object> loggingClass, Level level)","io.spine.testing.logging.LoggingTest.LoggingTest"]},{"name":"protected void ReflectiveBuilder()","description":"io.spine.testing.ReflectiveBuilder.ReflectiveBuilder","location":"testlib/io.spine.testing/-reflective-builder/-reflective-builder.html","searchKeys":["ReflectiveBuilder","protected void ReflectiveBuilder()","io.spine.testing.ReflectiveBuilder.ReflectiveBuilder"]},{"name":"protected void SimpleLoggingTest(Class<? extends Object> loggingClass, Level level)","description":"io.spine.testing.logging.SimpleLoggingTest.SimpleLoggingTest","location":"testlib/io.spine.testing.logging/-simple-logging-test/-simple-logging-test.html","searchKeys":["SimpleLoggingTest","protected void SimpleLoggingTest(Class<? extends Object> loggingClass, Level level)","io.spine.testing.logging.SimpleLoggingTest.SimpleLoggingTest"]},{"name":"protected void SingletonTest(Class<S> subject, Supplier<S> accessor)","description":"io.spine.testing.SingletonTest.SingletonTest","location":"testlib/io.spine.testing/-singleton-test/-singleton-test.html","searchKeys":["SingletonTest","protected void SingletonTest(Class<S> subject, Supplier<S> accessor)","io.spine.testing.SingletonTest.SingletonTest"]},{"name":"protected void SingletonTest(Class<S> subject, Visibility minimalStaticMethodVisibility, Supplier<S> accessor)","description":"io.spine.testing.SingletonTest.SingletonTest","location":"testlib/io.spine.testing/-singleton-test/-singleton-test.html","searchKeys":["SingletonTest","protected void SingletonTest(Class<S> subject, Visibility minimalStaticMethodVisibility, Supplier<S> accessor)","io.spine.testing.SingletonTest.SingletonTest"]},{"name":"protected void UtilityClassTest(Class<C> subject)","description":"io.spine.testing.UtilityClassTest.UtilityClassTest","location":"testlib/io.spine.testing/-utility-class-test/-utility-class-test.html","searchKeys":["UtilityClassTest","protected void UtilityClassTest(Class<C> subject)","io.spine.testing.UtilityClassTest.UtilityClassTest"]},{"name":"protected void UtilityClassTest(Class<C> subject, Visibility minimalStaticMethodVisibility)","description":"io.spine.testing.UtilityClassTest.UtilityClassTest","location":"testlib/io.spine.testing/-utility-class-test/-utility-class-test.html","searchKeys":["UtilityClassTest","protected void UtilityClassTest(Class<C> subject, Visibility minimalStaticMethodVisibility)","io.spine.testing.UtilityClassTest.UtilityClassTest"]},{"name":"protected void configure(NullPointerTester tester)","description":"io.spine.testing.ClassTest.configure","location":"testlib/io.spine.testing/-class-test/configure.html","searchKeys":["configure","protected void configure(NullPointerTester tester)","io.spine.testing.ClassTest.configure"]},{"name":"protected void expectSomeFailure(SimpleSubjectBuilderCallback<S, T> assertionCallback)","description":"io.spine.testing.SubjectTest.expectSomeFailure","location":"testlib/io.spine.testing/-subject-test/expect-some-failure.html","searchKeys":["expectSomeFailure","protected void expectSomeFailure(SimpleSubjectBuilderCallback<S, T> assertionCallback)","io.spine.testing.SubjectTest.expectSomeFailure"]},{"name":"public @interface SlowTest","description":"io.spine.testing.SlowTest","location":"testlib/io.spine.testing/-slow-test/index.html","searchKeys":["SlowTest","public @interface SlowTest","io.spine.testing.SlowTest"]},{"name":"public Class<? extends Object> loggingClass()","description":"io.spine.testing.logging.Interceptor.loggingClass","location":"testlib/io.spine.testing.logging/-interceptor/logging-class.html","searchKeys":["loggingClass","public Class<? extends Object> loggingClass()","io.spine.testing.logging.Interceptor.loggingClass"]},{"name":"public Class<T> resultClass()","description":"io.spine.testing.ReflectiveBuilder.resultClass","location":"testlib/io.spine.testing/-reflective-builder/result-class.html","searchKeys":["resultClass","public Class<T> resultClass()","io.spine.testing.ReflectiveBuilder.resultClass"]},{"name":"public Level level()","description":"io.spine.testing.logging.Interceptor.level","location":"testlib/io.spine.testing.logging/-interceptor/level.html","searchKeys":["level","public Level level()","io.spine.testing.logging.Interceptor.level"]},{"name":"public Level previousLevel()","description":"io.spine.testing.logging.Interceptor.previousLevel","location":"testlib/io.spine.testing.logging/-interceptor/previous-level.html","searchKeys":["previousLevel","public Level previousLevel()","io.spine.testing.logging.Interceptor.previousLevel"]},{"name":"public LoggingAssertions assertLog()","description":"io.spine.testing.logging.Interceptor.assertLog","location":"testlib/io.spine.testing.logging/-interceptor/assert-log.html","searchKeys":["assertLog","public LoggingAssertions assertLog()","io.spine.testing.logging.Interceptor.assertLog"]},{"name":"public ObjectArraySubject hasParametersThat()","description":"io.spine.testing.logging.LogRecordSubject.hasParametersThat","location":"testlib/io.spine.testing.logging/-log-record-subject/has-parameters-that.html","searchKeys":["hasParametersThat","public ObjectArraySubject hasParametersThat()","io.spine.testing.logging.LogRecordSubject.hasParametersThat"]},{"name":"public StringSubject hasClassNameThat()","description":"io.spine.testing.logging.LogRecordSubject.hasClassNameThat","location":"testlib/io.spine.testing.logging/-log-record-subject/has-class-name-that.html","searchKeys":["hasClassNameThat","public StringSubject hasClassNameThat()","io.spine.testing.logging.LogRecordSubject.hasClassNameThat"]},{"name":"public StringSubject hasMessageThat()","description":"io.spine.testing.logging.LogRecordSubject.hasMessageThat","location":"testlib/io.spine.testing.logging/-log-record-subject/has-message-that.html","searchKeys":["hasMessageThat","public StringSubject hasMessageThat()","io.spine.testing.logging.LogRecordSubject.hasMessageThat"]},{"name":"public StringSubject hasMethodNameThat()","description":"io.spine.testing.logging.LogRecordSubject.hasMethodNameThat","location":"testlib/io.spine.testing.logging/-log-record-subject/has-method-name-that.html","searchKeys":["hasMethodNameThat","public StringSubject hasMethodNameThat()","io.spine.testing.logging.LogRecordSubject.hasMethodNameThat"]},{"name":"public Subject hasLevelThat()","description":"io.spine.testing.logging.LogRecordSubject.hasLevelThat","location":"testlib/io.spine.testing.logging/-log-record-subject/has-level-that.html","searchKeys":["hasLevelThat","public Subject hasLevelThat()","io.spine.testing.logging.LogRecordSubject.hasLevelThat"]},{"name":"public ThrowableSubject hasThrowableThat()","description":"io.spine.testing.logging.LogRecordSubject.hasThrowableThat","location":"testlib/io.spine.testing.logging/-log-record-subject/has-throwable-that.html","searchKeys":["hasThrowableThat","public ThrowableSubject hasThrowableThat()","io.spine.testing.logging.LogRecordSubject.hasThrowableThat"]},{"name":"public abstract LogRecordSubject record()","description":"io.spine.testing.logging.LoggingAssertions.record","location":"testlib/io.spine.testing.logging/-logging-assertions/record.html","searchKeys":["record","public abstract LogRecordSubject record()","io.spine.testing.logging.LoggingAssertions.record"]},{"name":"public abstract StringSubject textOutput()","description":"io.spine.testing.logging.LoggingAssertions.textOutput","location":"testlib/io.spine.testing.logging/-logging-assertions/text-output.html","searchKeys":["textOutput","public abstract StringSubject textOutput()","io.spine.testing.logging.LoggingAssertions.textOutput"]},{"name":"public abstract T build()","description":"io.spine.testing.ReflectiveBuilder.build","location":"testlib/io.spine.testing/-reflective-builder/build.html","searchKeys":["build","public abstract T build()","io.spine.testing.ReflectiveBuilder.build"]},{"name":"public abstract class ClassTest<C>","description":"io.spine.testing.ClassTest","location":"testlib/io.spine.testing/-class-test/index.html","searchKeys":["ClassTest","public abstract class ClassTest<C>","io.spine.testing.ClassTest"]},{"name":"public abstract class LoggingTest","description":"io.spine.testing.logging.LoggingTest","location":"testlib/io.spine.testing.logging/-logging-test/index.html","searchKeys":["LoggingTest","public abstract class LoggingTest","io.spine.testing.logging.LoggingTest"]},{"name":"public abstract class ReflectiveBuilder<T>","description":"io.spine.testing.ReflectiveBuilder","location":"testlib/io.spine.testing/-reflective-builder/index.html","searchKeys":["ReflectiveBuilder","public abstract class ReflectiveBuilder<T>","io.spine.testing.ReflectiveBuilder"]},{"name":"public abstract class SimpleLoggingTest extends LoggingTest","description":"io.spine.testing.logging.SimpleLoggingTest","location":"testlib/io.spine.testing.logging/-simple-logging-test/index.html","searchKeys":["SimpleLoggingTest","public abstract class SimpleLoggingTest extends LoggingTest","io.spine.testing.logging.SimpleLoggingTest"]},{"name":"public abstract class SingletonTest<S> extends ClassTest<C>","description":"io.spine.testing.SingletonTest","location":"testlib/io.spine.testing/-singleton-test/index.html","searchKeys":["SingletonTest","public abstract class SingletonTest<S> extends ClassTest<C>","io.spine.testing.SingletonTest"]},{"name":"public abstract class SubjectTest<S extends Subject, T>","description":"io.spine.testing.SubjectTest","location":"testlib/io.spine.testing/-subject-test/index.html","searchKeys":["SubjectTest","public abstract class SubjectTest<S extends Subject, T>","io.spine.testing.SubjectTest"]},{"name":"public abstract class UtilityClassTest<C> extends ClassTest<C>","description":"io.spine.testing.UtilityClassTest","location":"testlib/io.spine.testing/-utility-class-test/index.html","searchKeys":["UtilityClassTest","public abstract class UtilityClassTest<C> extends ClassTest<C>","io.spine.testing.UtilityClassTest"]},{"name":"public abstract void isEmpty()","description":"io.spine.testing.logging.LoggingAssertions.isEmpty","location":"testlib/io.spine.testing.logging/-logging-assertions/is-empty.html","searchKeys":["isEmpty","public abstract void isEmpty()","io.spine.testing.logging.LoggingAssertions.isEmpty"]},{"name":"public class LogRecordSubject","description":"io.spine.testing.logging.LogRecordSubject","location":"testlib/io.spine.testing.logging/-log-record-subject/index.html","searchKeys":["LogRecordSubject","public class LogRecordSubject","io.spine.testing.logging.LogRecordSubject"]},{"name":"public final class Assertions","description":"io.spine.testing.Assertions","location":"testlib/io.spine.testing/-assertions/index.html","searchKeys":["Assertions","public final class Assertions","io.spine.testing.Assertions"]},{"name":"public final class Correspondences","description":"io.spine.testing.Correspondences","location":"testlib/io.spine.testing/-correspondences/index.html","searchKeys":["Correspondences","public final class Correspondences","io.spine.testing.Correspondences"]},{"name":"public final class DisplayNames","description":"io.spine.testing.DisplayNames","location":"testlib/io.spine.testing/-display-names/index.html","searchKeys":["DisplayNames","public final class DisplayNames","io.spine.testing.DisplayNames"]},{"name":"public final class Interceptor","description":"io.spine.testing.logging.Interceptor","location":"testlib/io.spine.testing.logging/-interceptor/index.html","searchKeys":["Interceptor","public final class Interceptor","io.spine.testing.logging.Interceptor"]},{"name":"public final class LogTruth","description":"io.spine.testing.logging.LogTruth","location":"testlib/io.spine.testing.logging/-log-truth/index.html","searchKeys":["LogTruth","public final class LogTruth","io.spine.testing.logging.LogTruth"]},{"name":"public final class TempDir","description":"io.spine.testing.TempDir","location":"testlib/io.spine.testing/-temp-dir/index.html","searchKeys":["TempDir","public final class TempDir","io.spine.testing.TempDir"]},{"name":"public final class TestValues","description":"io.spine.testing.TestValues","location":"testlib/io.spine.testing/-test-values/index.html","searchKeys":["TestValues","public final class TestValues","io.spine.testing.TestValues"]},{"name":"public final class Tests","description":"io.spine.testing.Tests","location":"testlib/io.spine.testing/-tests/index.html","searchKeys":["Tests","public final class Tests","io.spine.testing.Tests"]},{"name":"public interface LoggingAssertions","description":"io.spine.testing.logging.LoggingAssertions","location":"testlib/io.spine.testing.logging/-logging-assertions/index.html","searchKeys":["LoggingAssertions","public interface LoggingAssertions","io.spine.testing.logging.LoggingAssertions"]},{"name":"public static Correspondence<T, Class<?>> type<T>()","description":"io.spine.testing.Correspondences.type","location":"testlib/io.spine.testing/-correspondences/type.html","searchKeys":["type","public static Correspondence<T, Class<?>> type<T>()","io.spine.testing.Correspondences.type"]},{"name":"public static File forClass(Class<? extends Object> testSuite, Array<FileAttribute<? extends Object>> attrs)","description":"io.spine.testing.TempDir.forClass","location":"testlib/io.spine.testing/-temp-dir/for-class.html","searchKeys":["forClass","public static File forClass(Class<? extends Object> testSuite, Array<FileAttribute<? extends Object>> attrs)","io.spine.testing.TempDir.forClass"]},{"name":"public static File withPrefix(String prefix, Array<FileAttribute<? extends Object>> attrs)","description":"io.spine.testing.TempDir.withPrefix","location":"testlib/io.spine.testing/-temp-dir/with-prefix.html","searchKeys":["withPrefix","public static File withPrefix(String prefix, Array<FileAttribute<? extends Object>> attrs)","io.spine.testing.TempDir.withPrefix"]},{"name":"public static IllegalArgumentException assertIllegalArgument(Executable e)","description":"io.spine.testing.Assertions.assertIllegalArgument","location":"testlib/io.spine.testing/-assertions/assert-illegal-argument.html","searchKeys":["assertIllegalArgument","public static IllegalArgumentException assertIllegalArgument(Executable e)","io.spine.testing.Assertions.assertIllegalArgument"]},{"name":"public static IllegalStateException assertIllegalState(Executable e)","description":"io.spine.testing.Assertions.assertIllegalState","location":"testlib/io.spine.testing/-assertions/assert-illegal-state.html","searchKeys":["assertIllegalState","public static IllegalStateException assertIllegalState(Executable e)","io.spine.testing.Assertions.assertIllegalState"]},{"name":"public static LogRecordSubject assertThat(LogRecord record)","description":"io.spine.testing.logging.LogTruth.assertThat","location":"testlib/io.spine.testing.logging/-log-truth/assert-that.html","searchKeys":["assertThat","public static LogRecordSubject assertThat(LogRecord record)","io.spine.testing.logging.LogTruth.assertThat"]},{"name":"public static NullPointerException assertNpe(Executable e)","description":"io.spine.testing.Assertions.assertNpe","location":"testlib/io.spine.testing/-assertions/assert-npe.html","searchKeys":["assertNpe","public static NullPointerException assertNpe(Executable e)","io.spine.testing.Assertions.assertNpe"]},{"name":"public static StringValue newUuidValue()","description":"io.spine.testing.TestValues.newUuidValue","location":"testlib/io.spine.testing/-test-values/new-uuid-value.html","searchKeys":["newUuidValue","public static StringValue newUuidValue()","io.spine.testing.TestValues.newUuidValue"]},{"name":"public static String randomString()","description":"io.spine.testing.TestValues.randomString","location":"testlib/io.spine.testing/-test-values/random-string.html","searchKeys":["randomString","public static String randomString()","io.spine.testing.TestValues.randomString"]},{"name":"public static Subject assertThat(Api actual)","description":"io.spine.testing.logging.LogTruth.assertThat","location":"testlib/io.spine.testing.logging/-log-truth/assert-that.html","searchKeys":["assertThat","public static Subject assertThat(Api actual)","io.spine.testing.logging.LogTruth.assertThat"]},{"name":"public static Subject assertThat(FluentLogger actual)","description":"io.spine.testing.logging.LogTruth.assertThat","location":"testlib/io.spine.testing.logging/-log-truth/assert-that.html","searchKeys":["assertThat","public static Subject assertThat(FluentLogger actual)","io.spine.testing.logging.LogTruth.assertThat"]},{"name":"public static Subject assertThat(Level actual)","description":"io.spine.testing.logging.LogTruth.assertThat","location":"testlib/io.spine.testing.logging/-log-truth/assert-that.html","searchKeys":["assertThat","public static Subject assertThat(Level actual)","io.spine.testing.logging.LogTruth.assertThat"]},{"name":"public static T nullRef<T>()","description":"io.spine.testing.Tests.nullRef","location":"testlib/io.spine.testing/-tests/null-ref.html","searchKeys":["nullRef","public static T nullRef<T>()","io.spine.testing.Tests.nullRef"]},{"name":"public static UnknownTypeException assertUnknownType(Executable e)","description":"io.spine.testing.Assertions.assertUnknownType","location":"testlib/io.spine.testing/-assertions/assert-unknown-type.html","searchKeys":["assertUnknownType","public static UnknownTypeException assertUnknownType(Executable e)","io.spine.testing.Assertions.assertUnknownType"]},{"name":"public static int random(int max)","description":"io.spine.testing.TestValues.random","location":"testlib/io.spine.testing/-test-values/random.html","searchKeys":["random","public static int random(int max)","io.spine.testing.TestValues.random"]},{"name":"public static int random(int min, int max)","description":"io.spine.testing.TestValues.random","location":"testlib/io.spine.testing/-test-values/random.html","searchKeys":["random","public static int random(int min, int max)","io.spine.testing.TestValues.random"]},{"name":"public static long longRandom(long min, long max)","description":"io.spine.testing.TestValues.longRandom","location":"testlib/io.spine.testing/-test-values/long-random.html","searchKeys":["longRandom","public static long longRandom(long min, long max)","io.spine.testing.TestValues.longRandom"]},{"name":"public static void assertHasPrivateParameterlessCtor(Class<? extends Object> targetClass)","description":"io.spine.testing.Tests.assertHasPrivateParameterlessCtor","location":"testlib/io.spine.testing/-tests/assert-has-private-parameterless-ctor.html","searchKeys":["assertHasPrivateParameterlessCtor","public static void assertHasPrivateParameterlessCtor(Class<? extends Object> targetClass)","io.spine.testing.Tests.assertHasPrivateParameterlessCtor"]},{"name":"public static void assertInDelta(long expectedValue, long actualValue, long delta)","description":"io.spine.testing.Tests.assertInDelta","location":"testlib/io.spine.testing/-tests/assert-in-delta.html","searchKeys":["assertInDelta","public static void assertInDelta(long expectedValue, long actualValue, long delta)","io.spine.testing.Tests.assertInDelta"]},{"name":"public static void assertMatchesMask(Message message, FieldMask fieldMask)","description":"io.spine.testing.Tests.assertMatchesMask","location":"testlib/io.spine.testing/-tests/assert-matches-mask.html","searchKeys":["assertMatchesMask","public static void assertMatchesMask(Message message, FieldMask fieldMask)","io.spine.testing.Tests.assertMatchesMask"]},{"name":"public static void halt()","description":"io.spine.testing.Tests.halt","location":"testlib/io.spine.testing/-tests/halt.html","searchKeys":["halt","public static void halt()","io.spine.testing.Tests.halt"]},{"name":"public static void repeat(int count, Runnable action)","description":"io.spine.testing.Tests.repeat","location":"testlib/io.spine.testing/-tests/repeat.html","searchKeys":["repeat","public static void repeat(int count, Runnable action)","io.spine.testing.Tests.repeat"]},{"name":"public void Interceptor(Class<? extends Object> loggingClass, Level level)","description":"io.spine.testing.logging.Interceptor.Interceptor","location":"testlib/io.spine.testing.logging/-interceptor/-interceptor.html","searchKeys":["Interceptor","public void Interceptor(Class<? extends Object> loggingClass, Level level)","io.spine.testing.logging.Interceptor.Interceptor"]},{"name":"public void SubjectTest()","description":"io.spine.testing.SubjectTest.SubjectTest","location":"testlib/io.spine.testing/-subject-test/-subject-test.html","searchKeys":["SubjectTest","public void SubjectTest()","io.spine.testing.SubjectTest.SubjectTest"]},{"name":"public void intercept()","description":"io.spine.testing.logging.Interceptor.intercept","location":"testlib/io.spine.testing.logging/-interceptor/intercept.html","searchKeys":["intercept","public void intercept()","io.spine.testing.logging.Interceptor.intercept"]},{"name":"public void isDebug()","description":"io.spine.testing.logging.LogRecordSubject.isDebug","location":"testlib/io.spine.testing.logging/-log-record-subject/is-debug.html","searchKeys":["isDebug","public void isDebug()","io.spine.testing.logging.LogRecordSubject.isDebug"]},{"name":"public void isError()","description":"io.spine.testing.logging.LogRecordSubject.isError","location":"testlib/io.spine.testing.logging/-log-record-subject/is-error.html","searchKeys":["isError","public void isError()","io.spine.testing.logging.LogRecordSubject.isError"]},{"name":"public void release()","description":"io.spine.testing.logging.Interceptor.release","location":"testlib/io.spine.testing.logging/-interceptor/release.html","searchKeys":["release","public void release()","io.spine.testing.logging.Interceptor.release"]}]

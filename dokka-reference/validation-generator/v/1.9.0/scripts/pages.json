[{"name":"protected void CodeExpression(String value)","description":"io.spine.tools.validate.code.CodeExpression.CodeExpression","location":"validation-generator/io.spine.tools.validate.code/-code-expression/-code-expression.html","searchKeys":["CodeExpression","protected void CodeExpression(String value)","io.spine.tools.validate.code.CodeExpression.CodeExpression"]},{"name":"public BooleanExpression and(BooleanExpression other)","description":"io.spine.tools.validate.code.BooleanExpression.and","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/and.html","searchKeys":["and","public BooleanExpression and(BooleanExpression other)","io.spine.tools.validate.code.BooleanExpression.and"]},{"name":"public BooleanExpression invocation(MessageAccess parameter)","description":"io.spine.tools.validate.code.IsSet.invocation","location":"validation-generator/io.spine.tools.validate.code/-is-set/invocation.html","searchKeys":["invocation","public BooleanExpression invocation(MessageAccess parameter)","io.spine.tools.validate.code.IsSet.invocation"]},{"name":"public BooleanExpression negate()","description":"io.spine.tools.validate.code.BooleanExpression.negate","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/negate.html","searchKeys":["negate","public BooleanExpression negate()","io.spine.tools.validate.code.BooleanExpression.negate"]},{"name":"public BooleanExpression or(BooleanExpression other)","description":"io.spine.tools.validate.code.BooleanExpression.or","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/or.html","searchKeys":["or","public BooleanExpression or(BooleanExpression other)","io.spine.tools.validate.code.BooleanExpression.or"]},{"name":"public BooleanExpression valueIsNotSet(Expression<? extends Object> valueAccess)","description":"io.spine.tools.validate.code.IsSet.valueIsNotSet","location":"validation-generator/io.spine.tools.validate.code/-is-set/value-is-not-set.html","searchKeys":["valueIsNotSet","public BooleanExpression valueIsNotSet(Expression<? extends Object> valueAccess)","io.spine.tools.validate.code.IsSet.valueIsNotSet"]},{"name":"public BooleanExpression valueIsPresent(Expression<? extends Object> valueAccess)","description":"io.spine.tools.validate.code.IsSet.valueIsPresent","location":"validation-generator/io.spine.tools.validate.code/-is-set/value-is-present.html","searchKeys":["valueIsPresent","public BooleanExpression valueIsPresent(Expression<? extends Object> valueAccess)","io.spine.tools.validate.code.IsSet.valueIsPresent"]},{"name":"public CodeBlock compile()","description":"io.spine.tools.validate.code.ConstraintCode.compile","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/compile.html","searchKeys":["compile","public CodeBlock compile()","io.spine.tools.validate.code.ConstraintCode.compile"]},{"name":"public CodeBlock orElse(CodeBlock alternativeBranch)","description":"io.spine.tools.validate.code.ConditionalStatement.orElse","location":"validation-generator/io.spine.tools.validate.code/-conditional-statement/or-else.html","searchKeys":["orElse","public CodeBlock orElse(CodeBlock alternativeBranch)","io.spine.tools.validate.code.ConditionalStatement.orElse"]},{"name":"public CodeBlock returnStatement()","description":"io.spine.tools.validate.code.Expression.returnStatement","location":"validation-generator/io.spine.tools.validate.code/-expression/return-statement.html","searchKeys":["returnStatement","public CodeBlock returnStatement()","io.spine.tools.validate.code.Expression.returnStatement"]},{"name":"public CodeBlock toCode()","description":"io.spine.tools.validate.code.CodeExpression.toCode","location":"validation-generator/io.spine.tools.validate.code/-code-expression/to-code.html","searchKeys":["toCode","public CodeBlock toCode()","io.spine.tools.validate.code.CodeExpression.toCode"]},{"name":"public CodeBlock toCode()","description":"io.spine.tools.validate.code.ConditionalStatement.toCode","location":"validation-generator/io.spine.tools.validate.code/-conditional-statement/to-code.html","searchKeys":["toCode","public CodeBlock toCode()","io.spine.tools.validate.code.ConditionalStatement.toCode"]},{"name":"public CodeBlock toCode()","description":"io.spine.tools.validate.code.NewViolation.toCode","location":"validation-generator/io.spine.tools.validate.code/-new-violation/to-code.html","searchKeys":["toCode","public CodeBlock toCode()","io.spine.tools.validate.code.NewViolation.toCode"]},{"name":"public ConditionalStatement elseIf(BooleanExpression condition, CodeBlock alternative)","description":"io.spine.tools.validate.code.ConditionalStatement.elseIf","location":"validation-generator/io.spine.tools.validate.code/-conditional-statement/else-if.html","searchKeys":["elseIf","public ConditionalStatement elseIf(BooleanExpression condition, CodeBlock alternative)","io.spine.tools.validate.code.ConditionalStatement.elseIf"]},{"name":"public ConditionalStatement ifTrue(CodeBlock branch)","description":"io.spine.tools.validate.code.BooleanExpression.ifTrue","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/if-true.html","searchKeys":["ifTrue","public ConditionalStatement ifTrue(CodeBlock branch)","io.spine.tools.validate.code.BooleanExpression.ifTrue"]},{"name":"public ConstraintCode.Builder conditionCheck(Check conditionCheck)","description":"io.spine.tools.validate.code.ConstraintCode.Builder.conditionCheck","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/condition-check.html","searchKeys":["conditionCheck","public ConstraintCode.Builder conditionCheck(Check conditionCheck)","io.spine.tools.validate.code.ConstraintCode.Builder.conditionCheck"]},{"name":"public ConstraintCode.Builder createViolation(CreateViolation createViolation)","description":"io.spine.tools.validate.code.ConstraintCode.Builder.createViolation","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/create-violation.html","searchKeys":["createViolation","public ConstraintCode.Builder createViolation(CreateViolation createViolation)","io.spine.tools.validate.code.ConstraintCode.Builder.createViolation"]},{"name":"public ConstraintCode.Builder messageAccess(MessageAccess messageAccess)","description":"io.spine.tools.validate.code.ConstraintCode.Builder.messageAccess","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/message-access.html","searchKeys":["messageAccess","public ConstraintCode.Builder messageAccess(MessageAccess messageAccess)","io.spine.tools.validate.code.ConstraintCode.Builder.messageAccess"]},{"name":"public ConstraintCode.Builder onViolation(AccumulateViolations onViolation)","description":"io.spine.tools.validate.code.ConstraintCode.Builder.onViolation","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/on-violation.html","searchKeys":["onViolation","public ConstraintCode.Builder onViolation(AccumulateViolations onViolation)","io.spine.tools.validate.code.ConstraintCode.Builder.onViolation"]},{"name":"public ConstraintCode.Builder preparingDeclarations(Function<FieldAccess, CodeBlock> declarations)","description":"io.spine.tools.validate.code.ConstraintCode.Builder.preparingDeclarations","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/preparing-declarations.html","searchKeys":["preparingDeclarations","public ConstraintCode.Builder preparingDeclarations(Function<FieldAccess, CodeBlock> declarations)","io.spine.tools.validate.code.ConstraintCode.Builder.preparingDeclarations"]},{"name":"public ConstraintCode.Builder validateAsWhole()","description":"io.spine.tools.validate.code.ConstraintCode.Builder.validateAsWhole","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/validate-as-whole.html","searchKeys":["validateAsWhole","public ConstraintCode.Builder validateAsWhole()","io.spine.tools.validate.code.ConstraintCode.Builder.validateAsWhole"]},{"name":"public ConstraintCode.Builder validateOnlyIfSet()","description":"io.spine.tools.validate.code.ConstraintCode.Builder.validateOnlyIfSet","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/validate-only-if-set.html","searchKeys":["validateOnlyIfSet","public ConstraintCode.Builder validateOnlyIfSet()","io.spine.tools.validate.code.ConstraintCode.Builder.validateOnlyIfSet"]},{"name":"public ConstraintCode build()","description":"io.spine.tools.validate.code.ConstraintCode.Builder.build","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/build.html","searchKeys":["build","public ConstraintCode build()","io.spine.tools.validate.code.ConstraintCode.Builder.build"]},{"name":"public Expression<ProtocolMessageEnum> oneofCase(OneofDeclaration declaration)","description":"io.spine.tools.validate.MessageAccess.oneofCase","location":"validation-generator/io.spine.tools.validate/-message-access/oneof-case.html","searchKeys":["oneofCase","public Expression<ProtocolMessageEnum> oneofCase(OneofDeclaration declaration)","io.spine.tools.validate.MessageAccess.oneofCase"]},{"name":"public FieldAccess get(FieldDeclaration field)","description":"io.spine.tools.validate.MessageAccess.get","location":"validation-generator/io.spine.tools.validate/-message-access/get.html","searchKeys":["get","public FieldAccess get(FieldDeclaration field)","io.spine.tools.validate.MessageAccess.get"]},{"name":"public MethodSpec generateVBuild()","description":"io.spine.tools.validate.ValidateGenerator.generateVBuild","location":"validation-generator/io.spine.tools.validate/-validate-generator/generate-v-build.html","searchKeys":["generateVBuild","public MethodSpec generateVBuild()","io.spine.tools.validate.ValidateGenerator.generateVBuild"]},{"name":"public MethodSpec generateValidate()","description":"io.spine.tools.validate.ValidateGenerator.generateValidate","location":"validation-generator/io.spine.tools.validate/-validate-generator/generate-validate.html","searchKeys":["generateValidate","public MethodSpec generateValidate()","io.spine.tools.validate.ValidateGenerator.generateValidate"]},{"name":"public MethodSpec method()","description":"io.spine.tools.validate.code.IsSet.method","location":"validation-generator/io.spine.tools.validate.code/-is-set/method.html","searchKeys":["method","public MethodSpec method()","io.spine.tools.validate.code.IsSet.method"]},{"name":"public NewViolation.Builder addParam(Array<String> value)","description":"io.spine.tools.validate.code.NewViolation.Builder.addParam","location":"validation-generator/io.spine.tools.validate.code/-new-violation/-builder/add-param.html","searchKeys":["addParam","public NewViolation.Builder addParam(Array<String> value)","io.spine.tools.validate.code.NewViolation.Builder.addParam"]},{"name":"public NewViolation.Builder setField(FieldPath field)","description":"io.spine.tools.validate.code.NewViolation.Builder.setField","location":"validation-generator/io.spine.tools.validate.code/-new-violation/-builder/set-field.html","searchKeys":["setField","public NewViolation.Builder setField(FieldPath field)","io.spine.tools.validate.code.NewViolation.Builder.setField"]},{"name":"public NewViolation.Builder setFieldValue(FieldAccess fieldValue)","description":"io.spine.tools.validate.code.NewViolation.Builder.setFieldValue","location":"validation-generator/io.spine.tools.validate.code/-new-violation/-builder/set-field-value.html","searchKeys":["setFieldValue","public NewViolation.Builder setFieldValue(FieldAccess fieldValue)","io.spine.tools.validate.code.NewViolation.Builder.setFieldValue"]},{"name":"public NewViolation.Builder setMessage(String message)","description":"io.spine.tools.validate.code.NewViolation.Builder.setMessage","location":"validation-generator/io.spine.tools.validate.code/-new-violation/-builder/set-message.html","searchKeys":["setMessage","public NewViolation.Builder setMessage(String message)","io.spine.tools.validate.code.NewViolation.Builder.setMessage"]},{"name":"public NewViolation.Builder setNestedViolations(Expression<? extends Iterable<ConstraintViolation>> nestedViolations)","description":"io.spine.tools.validate.code.NewViolation.Builder.setNestedViolations","location":"validation-generator/io.spine.tools.validate.code/-new-violation/-builder/set-nested-violations.html","searchKeys":["setNestedViolations","public NewViolation.Builder setNestedViolations(Expression<? extends Iterable<ConstraintViolation>> nestedViolations)","io.spine.tools.validate.code.NewViolation.Builder.setNestedViolations"]},{"name":"public NewViolation.Builder setType(MessageType type)","description":"io.spine.tools.validate.code.NewViolation.Builder.setType","location":"validation-generator/io.spine.tools.validate.code/-new-violation/-builder/set-type.html","searchKeys":["setType","public NewViolation.Builder setType(MessageType type)","io.spine.tools.validate.code.NewViolation.Builder.setType"]},{"name":"public NewViolation build()","description":"io.spine.tools.validate.code.NewViolation.Builder.build","location":"validation-generator/io.spine.tools.validate.code/-new-violation/-builder/build.html","searchKeys":["build","public NewViolation build()","io.spine.tools.validate.code.NewViolation.Builder.build"]},{"name":"public String toString()","description":"io.spine.tools.validate.code.NewViolation.toString","location":"validation-generator/io.spine.tools.validate.code/-new-violation/to-string.html","searchKeys":["toString","public String toString()","io.spine.tools.validate.code.NewViolation.toString"]},{"name":"public TypeSpec generateClass()","description":"io.spine.tools.validate.ValidateGenerator.generateClass","location":"validation-generator/io.spine.tools.validate/-validate-generator/generate-class.html","searchKeys":["generateClass","public TypeSpec generateClass()","io.spine.tools.validate.ValidateGenerator.generateClass"]},{"name":"public abstract CodeBlock toCode()","description":"io.spine.tools.validate.code.Expression.toCode","location":"validation-generator/io.spine.tools.validate.code/-expression/to-code.html","searchKeys":["toCode","public abstract CodeBlock toCode()","io.spine.tools.validate.code.Expression.toCode"]},{"name":"public abstract void attachTo(Builder type)","description":"io.spine.tools.validate.ClassMember.attachTo","location":"validation-generator/io.spine.tools.validate/-class-member/attach-to.html","searchKeys":["attachTo","public abstract void attachTo(Builder type)","io.spine.tools.validate.ClassMember.attachTo"]},{"name":"public boolean isConstant()","description":"io.spine.tools.validate.code.BooleanExpression.isConstant","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/is-constant.html","searchKeys":["isConstant","public boolean isConstant()","io.spine.tools.validate.code.BooleanExpression.isConstant"]},{"name":"public boolean isConstantTrue()","description":"io.spine.tools.validate.code.BooleanExpression.isConstantTrue","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/is-constant-true.html","searchKeys":["isConstantTrue","public boolean isConstantTrue()","io.spine.tools.validate.code.BooleanExpression.isConstantTrue"]},{"name":"public class CodeExpression<R> implements Expression<R>","description":"io.spine.tools.validate.code.CodeExpression","location":"validation-generator/io.spine.tools.validate.code/-code-expression/index.html","searchKeys":["CodeExpression","public class CodeExpression<R> implements Expression<R>","io.spine.tools.validate.code.CodeExpression"]},{"name":"public final class BooleanExpression extends CodeExpression<R>","description":"io.spine.tools.validate.code.BooleanExpression","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/index.html","searchKeys":["BooleanExpression","public final class BooleanExpression extends CodeExpression<R>","io.spine.tools.validate.code.BooleanExpression"]},{"name":"public final class Builder","description":"io.spine.tools.validate.code.ConstraintCode.Builder","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/-builder/index.html","searchKeys":["Builder","public final class Builder","io.spine.tools.validate.code.ConstraintCode.Builder"]},{"name":"public final class Builder","description":"io.spine.tools.validate.code.NewViolation.Builder","location":"validation-generator/io.spine.tools.validate.code/-new-violation/-builder/index.html","searchKeys":["Builder","public final class Builder","io.spine.tools.validate.code.NewViolation.Builder"]},{"name":"public final class ConditionalStatement","description":"io.spine.tools.validate.code.ConditionalStatement","location":"validation-generator/io.spine.tools.validate.code/-conditional-statement/index.html","searchKeys":["ConditionalStatement","public final class ConditionalStatement","io.spine.tools.validate.code.ConditionalStatement"]},{"name":"public final class ConstraintCode","description":"io.spine.tools.validate.code.ConstraintCode","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/index.html","searchKeys":["ConstraintCode","public final class ConstraintCode","io.spine.tools.validate.code.ConstraintCode"]},{"name":"public final class Containers","description":"io.spine.tools.validate.code.Containers","location":"validation-generator/io.spine.tools.validate.code/-containers/index.html","searchKeys":["Containers","public final class Containers","io.spine.tools.validate.code.Containers"]},{"name":"public final class FieldAccess extends CodeExpression<R>","description":"io.spine.tools.validate.FieldAccess","location":"validation-generator/io.spine.tools.validate/-field-access/index.html","searchKeys":["FieldAccess","public final class FieldAccess extends CodeExpression<R>","io.spine.tools.validate.FieldAccess"]},{"name":"public final class IsSet","description":"io.spine.tools.validate.code.IsSet","location":"validation-generator/io.spine.tools.validate.code/-is-set/index.html","searchKeys":["IsSet","public final class IsSet","io.spine.tools.validate.code.IsSet"]},{"name":"public final class MessageAccess extends CodeExpression<R>","description":"io.spine.tools.validate.MessageAccess","location":"validation-generator/io.spine.tools.validate/-message-access/index.html","searchKeys":["MessageAccess","public final class MessageAccess extends CodeExpression<R>","io.spine.tools.validate.MessageAccess"]},{"name":"public final class NewViolation implements Expression<R>","description":"io.spine.tools.validate.code.NewViolation","location":"validation-generator/io.spine.tools.validate.code/-new-violation/index.html","searchKeys":["NewViolation","public final class NewViolation implements Expression<R>","io.spine.tools.validate.code.NewViolation"]},{"name":"public final class ValidateGenerator","description":"io.spine.tools.validate.ValidateGenerator","location":"validation-generator/io.spine.tools.validate/-validate-generator/index.html","searchKeys":["ValidateGenerator","public final class ValidateGenerator","io.spine.tools.validate.ValidateGenerator"]},{"name":"public final class VoidExpression extends CodeExpression<R>","description":"io.spine.tools.validate.code.VoidExpression","location":"validation-generator/io.spine.tools.validate.code/-void-expression/index.html","searchKeys":["VoidExpression","public final class VoidExpression extends CodeExpression<R>","io.spine.tools.validate.code.VoidExpression"]},{"name":"public interface AccumulateViolations implements Function<T, R>","description":"io.spine.tools.validate.AccumulateViolations","location":"validation-generator/io.spine.tools.validate/-accumulate-violations/index.html","searchKeys":["AccumulateViolations","public interface AccumulateViolations implements Function<T, R>","io.spine.tools.validate.AccumulateViolations"]},{"name":"public interface Check implements Function<T, R>","description":"io.spine.tools.validate.code.Check","location":"validation-generator/io.spine.tools.validate.code/-check/index.html","searchKeys":["Check","public interface Check implements Function<T, R>","io.spine.tools.validate.code.Check"]},{"name":"public interface ClassMember","description":"io.spine.tools.validate.ClassMember","location":"validation-generator/io.spine.tools.validate/-class-member/index.html","searchKeys":["ClassMember","public interface ClassMember","io.spine.tools.validate.ClassMember"]},{"name":"public interface CreateViolation implements Function<T, R>","description":"io.spine.tools.validate.code.CreateViolation","location":"validation-generator/io.spine.tools.validate.code/-create-violation/index.html","searchKeys":["CreateViolation","public interface CreateViolation implements Function<T, R>","io.spine.tools.validate.code.CreateViolation"]},{"name":"public interface Expression<R>","description":"io.spine.tools.validate.code.Expression","location":"validation-generator/io.spine.tools.validate.code/-expression/index.html","searchKeys":["Expression","public interface Expression<R>","io.spine.tools.validate.code.Expression"]},{"name":"public static BooleanExpression alternativeIsSet(Alternative alternative, MessageAccess messageAccess)","description":"io.spine.tools.validate.code.IsSet.alternativeIsSet","location":"validation-generator/io.spine.tools.validate.code/-is-set/alternative-is-set.html","searchKeys":["alternativeIsSet","public static BooleanExpression alternativeIsSet(Alternative alternative, MessageAccess messageAccess)","io.spine.tools.validate.code.IsSet.alternativeIsSet"]},{"name":"public static BooleanExpression falseLiteral()","description":"io.spine.tools.validate.code.BooleanExpression.falseLiteral","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/false-literal.html","searchKeys":["falseLiteral","public static BooleanExpression falseLiteral()","io.spine.tools.validate.code.BooleanExpression.falseLiteral"]},{"name":"public static BooleanExpression fromCode(CodeBlock code)","description":"io.spine.tools.validate.code.BooleanExpression.fromCode","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/from-code.html","searchKeys":["fromCode","public static BooleanExpression fromCode(CodeBlock code)","io.spine.tools.validate.code.BooleanExpression.fromCode"]},{"name":"public static BooleanExpression fromCode(String code, Array<Object> args)","description":"io.spine.tools.validate.code.BooleanExpression.fromCode","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/from-code.html","searchKeys":["fromCode","public static BooleanExpression fromCode(String code, Array<Object> args)","io.spine.tools.validate.code.BooleanExpression.fromCode"]},{"name":"public static BooleanExpression isDefault(Expression<? extends Object> value)","description":"io.spine.tools.validate.code.Containers.isDefault","location":"validation-generator/io.spine.tools.validate.code/-containers/is-default.html","searchKeys":["isDefault","public static BooleanExpression isDefault(Expression<? extends Object> value)","io.spine.tools.validate.code.Containers.isDefault"]},{"name":"public static BooleanExpression isEmpty(Expression<? extends Object> value)","description":"io.spine.tools.validate.code.Containers.isEmpty","location":"validation-generator/io.spine.tools.validate.code/-containers/is-empty.html","searchKeys":["isEmpty","public static BooleanExpression isEmpty(Expression<? extends Object> value)","io.spine.tools.validate.code.Containers.isEmpty"]},{"name":"public static BooleanExpression trueLiteral()","description":"io.spine.tools.validate.code.BooleanExpression.trueLiteral","location":"validation-generator/io.spine.tools.validate.code/-boolean-expression/true-literal.html","searchKeys":["trueLiteral","public static BooleanExpression trueLiteral()","io.spine.tools.validate.code.BooleanExpression.trueLiteral"]},{"name":"public static ConstraintCode.Builder forField(FieldDeclaration field)","description":"io.spine.tools.validate.code.ConstraintCode.forField","location":"validation-generator/io.spine.tools.validate.code/-constraint-code/for-field.html","searchKeys":["forField","public static ConstraintCode.Builder forField(FieldDeclaration field)","io.spine.tools.validate.code.ConstraintCode.forField"]},{"name":"public static Expression<R> formatted<R>(String template, Array<Object> args)","description":"io.spine.tools.validate.code.Expression.formatted","location":"validation-generator/io.spine.tools.validate.code/-expression/formatted.html","searchKeys":["formatted","public static Expression<R> formatted<R>(String template, Array<Object> args)","io.spine.tools.validate.code.Expression.formatted"]},{"name":"public static Expression<R> fromCode<R>(String code, Array<Object> args)","description":"io.spine.tools.validate.code.Expression.fromCode","location":"validation-generator/io.spine.tools.validate.code/-expression/from-code.html","searchKeys":["fromCode","public static Expression<R> fromCode<R>(String code, Array<Object> args)","io.spine.tools.validate.code.Expression.fromCode"]},{"name":"public static Expression<R> of<R>(CodeBlock code)","description":"io.spine.tools.validate.code.Expression.of","location":"validation-generator/io.spine.tools.validate.code/-expression/of.html","searchKeys":["of","public static Expression<R> of<R>(CodeBlock code)","io.spine.tools.validate.code.Expression.of"]},{"name":"public static Expression<R> of<R>(String code)","description":"io.spine.tools.validate.code.Expression.of","location":"validation-generator/io.spine.tools.validate.code/-expression/of.html","searchKeys":["of","public static Expression<R> of<R>(String code)","io.spine.tools.validate.code.Expression.of"]},{"name":"public static FieldAccess fieldOfMessage(MessageAccess message, FieldDeclaration field)","description":"io.spine.tools.validate.FieldAccess.fieldOfMessage","location":"validation-generator/io.spine.tools.validate/-field-access/field-of-message.html","searchKeys":["fieldOfMessage","public static FieldAccess fieldOfMessage(MessageAccess message, FieldDeclaration field)","io.spine.tools.validate.FieldAccess.fieldOfMessage"]},{"name":"public static MessageAccess of(String value)","description":"io.spine.tools.validate.MessageAccess.of","location":"validation-generator/io.spine.tools.validate/-message-access/of.html","searchKeys":["of","public static MessageAccess of(String value)","io.spine.tools.validate.MessageAccess.of"]},{"name":"public static NewViolation.Builder forField(FieldContext field)","description":"io.spine.tools.validate.code.NewViolation.forField","location":"validation-generator/io.spine.tools.validate.code/-new-violation/for-field.html","searchKeys":["forField","public static NewViolation.Builder forField(FieldContext field)","io.spine.tools.validate.code.NewViolation.forField"]},{"name":"public static NewViolation.Builder forMessage(FieldContext context, MessageType type)","description":"io.spine.tools.validate.code.NewViolation.forMessage","location":"validation-generator/io.spine.tools.validate.code/-new-violation/for-message.html","searchKeys":["forMessage","public static NewViolation.Builder forMessage(FieldContext context, MessageType type)","io.spine.tools.validate.code.NewViolation.forMessage"]},{"name":"public static VoidExpression formatted(String template, Array<Object> args)","description":"io.spine.tools.validate.code.VoidExpression.formatted","location":"validation-generator/io.spine.tools.validate.code/-void-expression/formatted.html","searchKeys":["formatted","public static VoidExpression formatted(String template, Array<Object> args)","io.spine.tools.validate.code.VoidExpression.formatted"]},{"name":"public void IsSet(FieldDeclaration field)","description":"io.spine.tools.validate.code.IsSet.IsSet","location":"validation-generator/io.spine.tools.validate.code/-is-set/-is-set.html","searchKeys":["IsSet","public void IsSet(FieldDeclaration field)","io.spine.tools.validate.code.IsSet.IsSet"]},{"name":"public void ValidateGenerator(MessageType type)","description":"io.spine.tools.validate.ValidateGenerator.ValidateGenerator","location":"validation-generator/io.spine.tools.validate/-validate-generator/-validate-generator.html","searchKeys":["ValidateGenerator","public void ValidateGenerator(MessageType type)","io.spine.tools.validate.ValidateGenerator.ValidateGenerator"]}]

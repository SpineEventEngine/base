/*
 * Copyright 2017, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'com.google.protobuf'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url = googleMavenCentralMirror
        }
    }
    dependencies {
        classpath(group: 'com.google.protobuf',
                name: 'protobuf-gradle-plugin',
                version: protobufGradlePluginVerison) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
    }
}

configurations {
    fetch {
        description = "Fetch the dependencies"
        extendsFrom compile
    }
}

dependencies {
    compile project(":base")

    compile "com.google.protobuf:protobuf-java:${protobufVersion}"
    fetch "io.spine.tools:spine-protoc-plugin:$spineModelCompilerVersion@jar"
}

protobuf {
    generatedFilesBaseDir = generatedRootDir

    protoc {
        artifact = protobufDependency
    }

    plugins {
        spineProtoc {
            // TODO: switch between .sh and .bat respectively
            artifact = "io.spine.tools:spine-protoc-plugin:$spineModelCompilerVersion:script@sh"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                spineProtoc {
                    outputSubDir = 'java'
                }
            }

            task.generateDescriptorSet = true
            task.descriptorSetOptions.path = "${projectDir}/build/descriptors/${task.sourceSet.name}.desc"
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.includeSourceInfo = true
        }
    }
}

build {
    dependsOn project(":protoc-plugin").publishToMavenLocal
}

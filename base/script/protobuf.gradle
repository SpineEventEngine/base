/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'com.google.protobuf'

configurations {
    // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
    runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
    testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"
}

dependencies {
    // Re-generate standard Proto types, so they are included in `known_types.desc`.
    protobuf deps.build.protobuf
}

ext {
    compiledProtoRoot = "$projectDir/generated"
    mainCompiledProto = "$compiledProtoRoot/main/java"
    testCompiledProto = "$compiledProtoRoot/test/java"
}

final def mainPruneTask = task pruneGoogleProtos(type: Delete) {
    delete "$mainCompiledProto/com"
    compileJava.dependsOn it
}

final def testPruneTask = task pruneTestGoogleProtos(type: Delete) {
    delete "$testCompiledProto/com"
    compileTestJava.dependsOn it
}

protobuf {
    generatedFilesBaseDir = compiledProtoRoot
    protoc {
        artifact = deps.build.protoc
    }
    generateProtoTasks {
        all().each { final task ->
            final def scope = task.sourceSet.name
            task.generateDescriptorSet = true
            task.descriptorSetOptions.path = "$buildDir/descriptors/$scope/known_types_${scope}.desc"
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.includeSourceInfo = true

            if (task.sourceSet.name.contains('test')) {
                testPruneTask.dependsOn task
            } else {
                mainPruneTask.dependsOn task
            }
        }
    }
}

/**
 * Checks if the given file belongs to the Google `.proto` sources.
 */
static boolean isGoogleProtoSource(final FileTreeElement file) {
    final String[] pathSegments = file.relativePath.segments
    return pathSegments.length >= 1 && pathSegments[0].equals('google')
}

/**
 * Checks if the given directory hosts files generated from the Google `.proto` sources.
 * 
 * <p>The directory should be called `com` and should have a single child directory called `google`.
 */
static boolean isCompiledGoogleProtoDir(final FileTreeElement file) {
    if (!file.directory) {
        return false
    }
    if (!file.name.equals('com')) {
        return false
    }
    final File directory = file.file
    final String[] children = directory.list()
    return children.length == 1 && children[0].equals('google')
}

/**
 * From all artifacts, exclude Google `.proto` sources and files generated from those sources.
 */
tasks.withType(Jar) {
    it.exclude { final FileTreeElement file ->
        isGoogleProtoSource(file) || isCompiledGoogleProtoDir(file)
    }
}

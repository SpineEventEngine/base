/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

group = 'io.spine'

configurations {
    // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
    runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
    testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'

apply from: deps.scripts.testArtifacts
apply from: deps.scripts.runBuild

dependencies {
    // Re-generate standard Proto types, so they are included in `known_types.desc`.
    //noinspection GroovyAssignabilityCheck
    protobuf deps.build.protobuf

    // Since we use `@CanIgnoreReturnValue` when annotating Validating Builders
    // ErrorProne Annotations is part of our API. 
    api deps.build.errorProneAnnotations
    
    testImplementation project(path: ":testlib")
}

protobuf {
    generatedFilesBaseDir = "$projectDir/generated"
    protoc {
        artifact = deps.build.protoc
    }
    generateProtoTasks {
        all().each { final task ->
            final def scope = task.sourceSet.name
            task.generateDescriptorSet = true
            task.descriptorSetOptions.path = "$buildDir/descriptors/$scope/known_types_${scope}.desc"
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.includeSourceInfo = true
        }
    }
}

sourceSets {
    main {
        resources.srcDirs += "$buildDir/descriptors/main"
        proto.srcDirs = ["$projectDir/src/main/proto"]
    }
    test {
        resources.srcDirs += "$buildDir/descriptors/test"
        proto.srcDirs = ["$projectDir/src/test/proto"]
    }

}

jar {
    // See `base-validating-builders/README.md`.
    from "$rootDir/base-validating-builders/builders"
}

build.doLast {
    runBuild("$rootDir/base-validating-builders")
}

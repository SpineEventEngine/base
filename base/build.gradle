/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import java.nio.file.Files

group = 'io.spine'

apply from: "$projectDir/script/protobuf.gradle"

apply from: deps.scripts.testArtifacts
apply from: deps.scripts.runBuild

dependencies {
    annotationProcessor deps.build.autoService.processor
    compileOnly deps.build.autoService.annotations
    
    // Since we use `@CanIgnoreReturnValue` when annotating Validating Builders
    // ErrorProne Annotations is part of our API.
    api deps.build.errorProneAnnotations

    testImplementation(
            project(path: ":testlib"),
            project(path: ":mute-logging")
    )
}

sourceSets {
    main {
        resources.srcDirs += "$buildDir/descriptors/main"
        proto.srcDirs = ["$projectDir/src/main/proto"]
    }
    test {
        resources.srcDirs += "$buildDir/descriptors/test"
        proto.srcDirs = ["$projectDir/src/test/proto"]
    }
}

/**
 * The JAR task assembles class files with a respect to the re-built message classes.
 *
 * The task checks each input file for a newer version in the `base-validating-builders`. If such
 * a version is found, the older version is excluded.
 */
jar {
    // See `base-validating-builders/README.md`
    final compiledProtoPath = "$rootDir/base-validating-builders/compiled-proto"
    final compiledProtos = fileTree(compiledProtoPath)

    from compiledProtos

    eachFile { final file ->
        logger.info "Appending $file"
        final classFile = file.file.toPath()
        final isProto = compiledProtos.filter { it.path.endsWith file.relativePath.toString() }
                                      .filter { !Files.isSameFile(it.toPath(), classFile) }
        if (!isProto.empty) {
            logger.info "File $classFile is excluded"
            file.exclude()
        } else {
            logger.debug "File $classFile is not excluded"
        }
    }
}

task rebuildProtobuf {
    dependsOn(rootProject.subprojects*.getTasksByName('publishToMavenLocal', false))

    doLast {
        runBuild("$rootDir/base-validating-builders")
    }
}

project.getTasksByName('publish', false)*.dependsOn rebuildProtobuf

build.finalizedBy rebuildProtobuf

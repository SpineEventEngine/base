/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.net;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_package = "io.spine.net";
option java_outer_classname = "UrlProto";

// A Universal Resource Locator.
//
message Url {

    // Reservation of the previously deprecated field indexes and names.
    reserved 1 to 2;
    reserved "raw", "record", "value";

    // The value of the URL.
    //
    // Validity of the value should be provided by the code creating instances of this message.
    //
    string spec = 3 [(required) = true];
}

// A URL in a structured form.
//
// This type represents URL according to RFC 3986.
// Using this type makes it easier to operate concrete URL attributes.
// Please see https://tools.ietf.org/html/rfc3986.
//
// This type is intended to be used only by parsing or validating utilities.
// For general purpose usage, please use `Url`.
//
message Uri {

    // Application layer protocol.
    Protocol protocol = 1;

    // User's email and password (both optional).
    Authorization auth = 2 [(validate) = true, (required) = false];

    // Domain name.
    string host = 3;

    // Server's port (e.g. :8080).
    //
    // We leave port as string, because port 0 is hypothetically possible to use.
    //
    string port = 4;

    // Relative path to desired resource (e.g. "/index" or "/js/app.js").
    string path = 5;

    // A list of key-value pairs (?key1=value1&key2=value2).
    repeated QueryParameter query = 6;

    // Sub-resource (e.g. "#article").
    string fragment = 7;

    // Application layer protocol.
    message Protocol {

        oneof protocol {

            // Most often used schemas.
            Schema schema = 1;

            // Some other protocol
            string name = 2;
        }
    }

    // Most often used application layer protocols.
    enum Schema {
        UNDEFINED = 0;
        HTTP = 1;
        HTTPS = 2;
        FTP = 3;
        MAILTO = 4;
        FILE = 5;
        DATA = 6;
        IRC = 7;
        RTP = 8;
    }

    // Pair of the username (email commonly) and password (optional) (e.g. "user:password@").
    message Authorization {

        // User name.
        string user_name = 1 [(required) = true];

        // Corresponding password.
        string password = 2;
    }

    // Url query parameter type. Should look like key=value after converting to string
    message QueryParameter {

        // Parameter name.
        string key = 1;

        // Parameter value.
        string value = 2;
    }
}

/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

// API Note on Packaging
// ---------------------
// We do not define the package for this file to allow shorter options for user-defined types.
// This allows to write:
//
//     option (internal) = true;
//
// instead of:
//
//      option (spine.base.internal) = true;
//

// Custom Type Prefix Option
// -------------------------
// The custom `type_url_prefix` option allows to define specify custom type URL prefix for messages
// defined in a proto file. This option is declared in this file. Other proto files must import
// `options.proto` to be able to specify custom type URL prefix.
//
// It is recommended that the import statement is provided before the line with `type_url_prefix`
// option to make it obvious that custom option is defined in the imported file.
//
// For example:
//
// syntax = "proto3";
//
// package my.package;
//
// import "spine/options.proto";
//
// option (type_url_prefix) = "type.example.org";
//

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "OptionsProto";
option java_package = "io.spine.option";

import "google/protobuf/descriptor.proto";

//
// Reserved Range of Option Field Numbers
// --------------------------------------
// Spine Options use the range of option field numbers from the internal range reserved for
// individual organizations. For details of custom Protobuf options and this range please see:
//
//      https://developers.google.com/protocol-buffers/docs/proto#customoptions
//
// The whole range reserved for individual organizations is 50000-99999.
// The range used by Spine Options is 73812-75000.
// In order to prevent number collision with custom options used by a project based on Spine,
// numbers for custom options defined in this project should be in the range 50000-73811 or
// 75001-99999.
//

extend google.protobuf.FieldOptions {

    // Field Validation Constraints
    //-----------------------------
    // For constraints defined via message-based types, please see documentation of corresponding
    // message types.
    //

    // The option to mark a field as required.
    //
    // If the field type is a `message`, it must be set to a non-default instance.
    // If it is `string` or `bytes`, the value must not be an empty string or an array.
    // Other field types are not applicable.
    // If the field is repeated, it must have at least one element.
    //
    // Unlike the `required` keyword used in Protobuf 2, the option does not affect the transfer
    // layer. Even if a message content violates the requirement set by the option, it would still
    // be a valid message for the Protobuf library.
    //
    // Example: Using `(required)` field validation constraint.
    //
    //     message MyOuterMessage {
    //         MyMessage field = 1 [(required) = true];
    //     }
    //
    bool required = 73812;

    // See `IfMissingOption`
    IfMissingOption if_missing = 73813;

    // Reserved 73814 and 73815 for deleted options `decimal_max` and `decimal_min`.

    // A higher boundary to the range of values of a number.
    MaxOption max = 73816;

    // A lower boundary to the range of values of a number.
    MinOption min = 73817;

    // 73818 reserved for the (digits) option.

    // 73819 reserved for the (when) option.

    // See `PatternOption`.
    PatternOption pattern = 73820;

    // Turns on validation constraint checking for a value of a message, a map, or a repeated field.
    //
    // Default value is `false`.
    //
    // If set to `true`, the outer message declaring the annotated field would be valid if:
    //
    //   1. A message field value satisfies the validation constraints defined in the corresponding
    //      message type of the field.
    //
    //   2. Each value of a map entry satisfies validation constraints.
    //
    //   3. Each item of a repeated field satisfies validation constraints.
    //
    bool validate = 73821;

    // See `IfInvalidOption`.
    IfInvalidOption if_invalid = 73822;

    // See `GoesOption`.
    GoesOption goes = 73823;

    // Indicates that a field can only be set once.
    //
    // A typical use-case would include a value of an ID, which doesn't change over the course of
    // the life of an entity.
    //
    // Example: Using `(set_once)` field validation constraint.
    //
    //     message User {
    //         UserId id = 1 [(set_once) = true];
    //     }
    //
    // Once set, the `id` field cannot be changed.
    //
    bool set_once = 73824;

    // The option to mark a `repeated` field as a collection of unique elements.
    //
    // Example: Using `(distinct)` constraint for a repeated field.
    //
    //    message Blizzard {
    //
    //        // All snowflakes must be unique in this blizzard.
    //        //
    //        // Attempting to add a snowflake that is equal to an existing one would result
    //        // in constraint violation error.
    //        //
    //        repeated Snowflake = 1 [(distinct) = true];
    //    }
    //
    bool distinct = 73825;

    // The option to indicate that a numeric field is required to have a value which belongs
    // to the specified bounded range. For unbounded ranges, please use `(min)` and `(max) options.
    //
    // The range can be open (not including the endpoint) or closed (including the endpoint) on
    // each side. Open endpoints are indicated using a parenthesis (`(`, `)`). Closed endpoints are
    // indicated using a square bracket (`[`, `]`).
    //
    // Example: Defining ranges of numeric values.
    //
    //     message NumRanges {
    //         int32 hour = 1 [(range) = "[0..24)"];
    //         uint32 minute = 2 [(range) = "[0..59]"];
    //         float degree = 3 [(range) = "[0.0..360.0)"];
    //         double angle = 4 [(range) = "(0.0..180.0)"];
    //     }
    //
    // NOTE: That definition of ranges must be consistent with the type they constrain.
    //       An range for an integer field must be defined with integer endpoints.
    //       A range for a floating point field must be defined with decimal separator (`.`),
    //       even if the endpoint value does not have a fractional part.
    //
    string range = 73826;

    // Reserved 73827 to 73849 for future validation options.

    // API Annotations
    //-----------------

    // Indicates a field which is internal to Spine, not part of the public API, and should not be
    // used by users of the framework.
    //
    // If you plan to implement an extension of the framework, which is going to be
    // wired into the framework, you may use the internal parts. Please consult with the Spine
    // team, as the internal APIs do not have the same stability API guarantee as public ones.
    //
    bool internal = 73850;

    // Reserved 73851 for the deleted SPI option.

    // Indicates a field that can change at any time, and has no guarantee of API stability and
    // backward-compatibility.
    //
    // Usage guidelines:
    // 1. This annotation is used only on public API. Internal interfaces should not use it.
    // 2. This annotation can only be added to new API. Adding it to an existing API is considered
    //    API-breaking.
    // 3. Removing this annotation from an API gives it stable status.
    //
    bool experimental = 73852;

    // Signifies that a public API is subject to incompatible changes, or even removal, in a future
    // release.
    //
    // An API bearing this annotation is exempt from any compatibility guarantees made by its
    // containing library. Note that the presence of this annotation implies nothing about the
    // quality of the API in question, only the fact that it is not "API-frozen."
    // It is generally safe for applications to depend on beta APIs, at the cost of some extra work
    // during upgrades.
    //
    bool beta = 73853;

    // Marks an entity state field as column.
    //
    // The column fields are stored separately from the entity record and can be specified as
    // filtering criteria during entity querying.
    //
    // The column field should be declared as follows:
    //
    // message UserProfile {
    //    ...
    //    int32 year_of_registration = 8 [(column) = true];
    // }
    //
    // The `year_of_registration` field value can then be used as query parameter when reading
    // entities of `UserProfile` type from the server side.
    //
    // The value of a column field can be updated in two ways:
    //
    // 1. In the handler methods of the entity, just like any other part of entity state.
    // 2. Using the language-specific tools like `EntityWithColumns` interface in Java.
    //
    // All column fields are considered optional by the framework.
    //
    // Currently, only entities of projection and process manager type are eligible for having
    // columns (see `EntityOption`). For all other message types the column declarations are
    // ignored.
    //
    // The `repeated` and `map` fields cannot be columns.
    //
    bool column = 73854;

    // Reserved 73855 to 73890 for future options.

    // Reserved 73900 for removed `by` option.
}

extend google.protobuf.OneofOptions {

    // Marks a `oneof` group, in which one field *must* be set.
    //
    // Alternative to `(required_field)` with all the field in the group joined with the OR
    // operator.
    //
    bool is_required = 73891;

    // Reserved 73892 to 73899 for future options.
}

extend google.protobuf.MessageOptions {

    // Validation Constraints
    //------------------------

    // The default format string for validation error message text.
    //
    // This option extends message types that extend `FieldOptions`
    // The number of parameters and their types are determined by the type of field options.
    //
    string default_message = 73901;

    // The constraint to require at least one of the fields or a combination of fields.
    //
    // Unlike the `required` field constraint which always require corresponding field,
    // this message option allows to require alternative fields or a combination of them as
    // an alternative. Field names and `oneof` group names are acceptable.
    //
    // Field names are separated using the pipe (`|`) symbol. The combination of fields is defined
    // using the ampersand (`&`) symbol.
    //
    // Example: Pipe syntax for defining alternative required fields.
    //
    //     message PersonName {
    //        option (required_field) = "given_name|honorific_prefix & family_name";
    //
    //        string honorific_prefix = 1;
    //        string given_name = 2;
    //        string middle_name = 3;
    //        string family_name = 4;
    //        string honorific_suffix = 5;
    //     }
    //
    string required_field = 73902;

    // See `EntityOption`.
    EntityOption entity = 73903;

    // An external validation constraint for a field.
    //
    // Allows to re-define validation constraints for a message when its usage as a field of
    // another type requires alternative constraints. This includes definition of constraints for
    // a message which does not have them defined within the type.
    //
    // A target field of an external constraint should be specified using a fully-qualified
    // field name (e.g. `mypackage.MessageName.field_name`).
    //
    // Example: Defining external validation constraint.
    //
    //     package io.spine.example;
    //
    //     // Defines a change in a string value.
    //     //
    //     // Both of the fields of this message are not `required` to be able to describe
    //     // a change from empty value to non-empty value, or from a non-empty value to
    //     // an empty string.
    //     //
    //     message StringChange {
    //
    //          // The value of the field that's changing.
    //          string previous_value = 1;
    //
    //          // The new value of the field.
    //          string new_value = 2;
    //     }
    //
    //     // A command to change a name of a task.
    //     //
    //     // The task has a non-empty name. A new name cannot be empty.
    //     //
    //     message RenameTask {
    //
    //          // The ID of the task to rename.
    //          string task_id = 1;
    //
    //          // Instruction for changing the name.
    //          //
    //          // The value of `change.previous_value` is the current name of the task.
    //          // It cannot be empty.
    //          //
    //          // The value of `change.new_value` is the new name of the task.
    //          // It cannot be empty either.
    //          //
    //          StringChange change = 1 [(validate) = true];
    //     }
    //
    //     // External validation constraint for both fields of the `StringChange` message
    //     // in the scope of the `RenameTask` command.
    //     //
    //     message RequireTaskNames {
    //          option (constraint_for) = "spine.example.RenameTask.change";
    //
    //          string previous_value = 1 [(required) = true];
    //          string new_value = 2 [(required) = true];
    //     }
    //
    // NOTE: A target field for an external validation constraint must be have the option `(validate)`
    //       set to `true`. See the definition of the `RenameTask.change` field in the example
    //       above. If there is no such option defined, or it is set to `false`, the external
    //       constraint will not be applied.
    //
    // External validation constraints can be applied to fields of several types.
    // To do so, separate fully-qualified references to these fields with comma.
    //
    // Example: External validation constraints for multiple fields.
    //
    //     // External validation constraint for requiring a new value in renaming commands.
    //     message RequireNewName {
    //         option (constraint_for) = "spine.example.RenameTask.change,"
    //                                  "spine.example.RenameProject.change,";
    //                                  "spine.example.UpdateComment.text_change;
    //
    //         string new_value = 1 [(required) = true];
    //     }
    //
    // NOTE: An external validation constraint for a field must be defined only once.
    //       Spine Model Compiler does not check such an “overwriting”.
    //       See the issue: https://github.com/SpineEventEngine/base/issues/318.
    //
    string constraint_for = 73904;

    // Reserved 73905 to 73910 for future validation options.

    // API Annotations
    //-----------------

    // Indicates a file which is internal to Spine, not part of the public API, and should not be
    // used by users of the framework.
    bool internal_type = 73911;

    // Indicates a file which contains elements of Service Provider Interface (SPI).
    bool SPI_type = 73912;

    // Indicates a public API that can change at any time, and has no guarantee of API stability and
    // backward-compatibility.
    bool experimental_type = 73913;

    // Signifies that a public API is subject to incompatible changes, or even removal,
    // in a future release.
    bool beta_type = 73914;

    // Specifies a characteristic inherent in the the given message type.
    //
    // Example: Using `(is)` message option.
    //
    //     message CreateProject {
    //         option (is).java_type = "ProjectCommand";
    //
    //         // Remainder omitted.
    //     }
    //
    // In the example above, `CreateProject` message is a `ProjectCommand`.
    //
    // To specify a characteristic for every message in a `.proto` file, use `(every_is)` file
    // option. If both `(is)` and `(every_is)` options are found, both are applied.
    //
    // When targeting Java, specify the name of a Java interface to be implemented by this
    // message via `(is).java_type`.
    //
    IsOption is = 73915;

    // Reserved 73916 to 73921 for future API annotation options.

    // Reserved 73922 for removed `enrichment_for` option.

    // Reserved 73923 to 73938 for future options.

    // Reserved 73939 and 73940 for the deleted options `events` and `rejections`.
}

extend google.protobuf.FileOptions {

    // Specifies a type URL prefix for all types within a file.
    //
    // This type URL will be used when packing messages into `Any`.
    // See `any.proto` for more details.
    //
    string type_url_prefix = 73941;

    // Indicates a file which should not be used by users of the framework.
    bool internal_all = 73942;

    // Indicates a file which contains elements of Service Provider Interface (SPI).
    bool SPI_all = 73943;

    // Indicates a public API that can change at any time, and has no guarantee of API stability and
    // backward-compatibility.
    bool experimental_all = 73944;

    // Signifies that a public API is subject to incompatible changes, or even removal, in a future
    // release.
    bool beta_all = 73945;

    // Specifies a characteristic common for all the message types in the given file.
    //
    // Example: Marking all the messages using the `(every_is)` file option.
    // ```
    //     option (every_is).java_type = "ProjectCommand";
    //
    //     message CreateProject {
    //         // ...
    //
    //         message WithAssignee {
    //         // ...
    //         }
    //     }
    //
    //     message DeleteProject { /*...*/ }
    // ```
    //
    // In the example above, `CreateProject`, `CreateProject.WithAssignee`, and `DeleteProject`
    // messages are `ProjectCommand`-s.
    //
    // To specify a characteristic for a single message, use `(is)` message option. If both `(is)`
    // and `(every_is)` options are found, both are applied.
    //
    // When targeting Java, specify the name of a Java interface to be implemented by these
    // message types via `(every_is).java_type`.
    //
    IsOption every_is = 73946;

    // Reserved 73947 to 73970 for future use.
}

extend google.protobuf.ServiceOptions {

    // Indicates that the service is a part of Service Provider Interface (SPI).
    bool SPI_service = 73971;

    // Reserved 73971 to 73980.
}

// Reserved 73981 to 74000 for other future Spine Options numbers.

//
// Validation Option Types
//---------------------------

// Defines the error handling for `required` field with no value set.
//
// Applies only to the fields marked as `required`.
// Validation error message is composed according to the rules defined by this option.
//
// Example: Using the `(if_missing)` option.
//
//    message Holder {
//        MyMessage field = 1 [(required) = true,
//                             (if_missing).msg_format = "This field is required."];
//    }
//
message IfMissingOption {

    // The default error message.
    option (default_message) = "A value must be set.";

    // A user-defined validation error format message.
    string msg_format = 1;
}

// The field value must be greater than or equal to the given minimum number.
//
// Is applicable only to numbers.
// Repeated fields are supported.
//
// Example: Defining lower boundary for a numeric field.
//
//     message KelvinTemperature {
//         double value = 1 [(min).value = "0.0"];
//     }
//
message MinOption {

    // The default error message format string.
    //
    // The format parameters are:
    //   1) "or equal to " string (if the `exclusive` parameter is false) or an empty string;
    //   2) the minimum number.
    //
    option (default_message) = "The number must be greater than %s%s.";

    // The string representation of the minimum field value.
    string value = 1;

    // Specifies if the field should be strictly greater than the specified minimum.
    //
    // The default value is false, i.e. the bound is inclusive.
    //
    bool exclusive = 2;

    // A user-defined validation error format message.
    string msg_format = 3;
}

// The field value must be less than or equal to the given maximum number.
//
// Is applicable only to numbers.
// Repeated fields are supported.
//
// Example: Defining upper boundary for a numeric field.
//
//     message Elevation {
//         double value = 1 [(max).value = "8848.00"];
//     }
//
message MaxOption {

    // The default error message format string.
    //
    // The format parameters are:
    //   1) "or equal to " string (if the `exclusive` parameter is false) or an empty string;
    //   2) the maximum number.
    //
    option (default_message) = "The number must be less than %s%s.";

    // The string representation of the maximum field value.
    string value = 1;

    // Specifies if the field should be strictly less than the specified maximum
    //
    // The default value is false, i.e. the bound is inclusive.
    //
    bool exclusive = 2;

    // A user-defined validation error format message.
    string msg_format = 3;
}

// A string field value must match the given regular expression.
// Is applicable only to strings.
// Repeated fields are supported.
//
// Example: Using the `(pattern)` option.
//
//     message CreateAccount {
//         string id = 1 [(pattern).regex = "^[A-Za-z0-9+]+$"];
//     }
//
message PatternOption {

    // The default error message format string.
    //
    // The format parameter is the regular expression to which the value must match.
    //
    option (default_message) = "The string must match the regular expression `%s`.";

    // The regular expression to match.
    string regex = 1;

    // The regex flag.
    //
    // Has no effect. Use `modifier` instead.
    //
    int32 flag = 2 [deprecated = true];

    // Modifiers for this pattern.
    Modifier modifier = 4;

    // A user-defined validation error format message.
    string msg_format = 3;

    // Regular expression modifiers.
    //
    // These modifiers are specifically selected to be supported in many implementation platforms.
    //
    message Modifier {

        // Enables the dot (`.`) symbol to match all the characters.
        //
        // By default, the dot does not match line break characters.
        //
        // May also be known in some platforms as "single line" mode and be encoded with the `s`
        // flag.
        //
        bool dot_all = 1;

        // Allows to ignore the case of the matched symbols.
        //
        // For example, this modifier is specified, string `ABC` would be a complete match for
        // the regex `[a-z]+`.
        //
        // On some platforms may be represented by the `i` flag.
        //
        bool case_insensitive = 2;

        // Enables the `^` (caret) and `$` (dollar) signs to match a start and an end of a line
        // instead of a start and an end of the whole expression.
        //
        // On some platforms may be represented by the `m` flag.
        //
        bool multiline = 3;

        // Enables matching the whole UTF-8 sequences,
        //
        // On some platforms may be represented by the `u` flag.
        //
        bool unicode = 4;

        // Allows the matched strings to contain a full match to the pattern and some other
        // characters as well.
        //
        // By default, a string only matches a pattern if it is a full match, i.e. there are no
        // unaccounted for leading and/or trailing characters.
        //
        // This modifier is usually not represented programming languages, as the control over
        // weather to match an entire string or only its part is provided to the user by other
        // language means. For example, in Java, this would be the difference between methods
        // `matches()` and `find()` of the `java.util.regex.Matcher` class.
        //
        bool partial_match = 5;
    }
}

// Specifies the message to show if a validated field happens to be invalid.
// Is applicable only to messages.
// Repeated fields are supported.
//
// Example: Using the `(if_invalid)` option.
//
//     message Holder {
//         MyMessage field = 1 [(validate) = true, (if_invalid).msg_format = "The field is invalid."];
//    }
//
message IfInvalidOption {

    // The default error message for the field.
    option (default_message) = "The message must have valid properties.";

    // A user-defined validation error format message.
    string msg_format = 1;
}

// Specifies that a message field can be present only if another field is present.
//
// Unlike the `required_field` that handles combination of required fields, this option is useful
// when it is needed to say that an optional field makes sense only when another optional field is
// present.
//
// Example: Requiring mutual presence of optional fields.
//
//    message ScheduledItem {
//        ...
//        spine.time.LocalDate date = 4;
//        spine.time.LocalTime time = 5 [(goes).with = "date"];
//    }
//
message GoesOption {

    // The default error message format string.
    //
    // The first parameter is the name of the field for which we specify the option.
    // The second parameter is the name of the field set in the "with" value.
    //
    option (default_message) = "The field `%s` can only be set when the field `%s` is defined.";

    // A name of the field required for presence of the field for which we set the option.
    string with = 1;

    // A user-defined validation error format message.
    string msg_format = 2;
}

// Defines options of a message representing a state of an entity.
message EntityOption {

    // A type of an entity for state of which the message is defined.
    enum Kind {
        // Reserved for errors.
        KIND_UNKNOWN = 0;

        // The message is an aggregate state.
        AGGREGATE = 1;

        // The message is a state of a projection.
        PROJECTION = 2;

        // The message is a state of a process manager.
        PROCESS_MANAGER = 3;

        // The message is a state of an entity.
        ENTITY = 4;
    }

    // The type of the entity.
    Kind kind = 1;

    // The level of visibility of the entity to queries.
    enum Visibility {

        // Default visibility is different for different types of entities:
        //  - for projections, "FULL" is default;
        //  - for aggregates, process managers, and other entities, "NONE" is default.
        //
        DEFAULT = 0;

        // The entity is not visible to queries.
        NONE = 1;

        // Client-side applications can subscribe to updates of entities of this type.
        SUBSCRIBE = 2;

        // Client-side applications can query this type of entities.
        QUERY = 3;

        // Client-side applications can subscribe and query this type of entity.
        FULL = 4;
    }

    // The visibility of the entity.
    //
    // If not defined, the value of this option is `DEFAULT`.
    //
    Visibility visibility = 2;
}

// Defines a marker for a given type or a set of types.
//
// The option may be used in two modes:
//   - with the marker code generation;
//   - without the marker code generation.
//
// When used with the code generation, language-specific markers are generated by the Protobuf
// compiler. Otherwise, it is expected that the user creates such markers manually.
//
message IsOption {

    // Enables the generation of marker interfaces.
    //
    // The generation is disabled by default.
    bool generate = 1;

    // The reference to a Java interface.
    //
    // May be an fully-qualified or a simple name. In the latter case, the interface should belong
    // to the same Java package as the message class which implements this interface.
    //
    // The framework does not ensure the referenced type exists.
    // If the generation is disabled, the Java type is used as-is. Otherwise, a corresponding Java
    // interface is generated.
    //
    // A generated interface has no declared methods and extends `com.google.protobuf.Message`.
    //
    // The `.java` file is placed alongside with the code generated by the proto-to-java compiler.
    //
    // If fully-qualified name given, the package of the generated type matches the fully-qualified
    // name. When a simple name is set in the option, the package of the interface matches the
    // package of the message class.
    //
    // If both `(is)` and `(every_is)` options specify a Java interface, the message class
    // implements both interfaces.
    //
    string java_type = 2;
}

/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

// API Note on Packaging
// ---------------------
// We do not define the package for this file to allow shorter options for user-defined types.
// This allows to write:
//
//     option (internal) = true;
//
// instead of:
//
//      option (spine.base.internal) = true;
//

// Custom Type Prefix Option
// -------------------------
// The custom `type_url_prefix` option allows to define specify custom type URL prefix for messages
// defined in a proto file. This option is declared in this file. Other proto files must import
// `options.proto` to be able to specify custom type URL prefix.
//
// It is recommended that the import statement is provided before the line with `type_url_prefix`
// option to make it obvious that custom option is defined in the imported file.
//
// For example:
//
// syntax = "proto3";
//
// package my.package;
//
// import "spine/options.proto";
//
// option (type_url_prefix) = "type.example.org";
//

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "OptionsProto";
option java_package = "io.spine.option";

import "google/protobuf/descriptor.proto";

//
// Reserved Range of Option Field Numbers
// --------------------------------------
// Spine Options use the range of option field numbers from the internal range reserved for
// individual organizations. For details of custom Protobuf options and this range please see:
//
//      https://developers.google.com/protocol-buffers/docs/proto#customoptions
//
// The whole range reserved for individual organizations is 50000-99999.
// The range used by Spine Options is 73812-75000.
// In order to prevent number collision with custom options used by a project based on Spine,
// numbers for custom options defined in this project should be in the range 50000-73811 or
// 75001-99999.
//

extend google.protobuf.FieldOptions {

    // Field Validation Constraints
    //-----------------------------
    // For constraints defined via message-based types, please see documentation of corresponding
    // message types.
    //

    // The option to mark a field as required.
    //
    // If the field type is a `message`, it must be set to a non-default instance.
    // If it is `string` or `bytes`, the value must not be an empty string or an array.
    // Other field types are not applicable.
    // If the field is repeated, it must have at least one value set, and all its values must be
    // valid.
    //
    // Unlike the `required` keyword used in Protobuf 2, the option does not affect the transfer
    // layer. Even if a message content violates the requirement set by the option, it would still
    // be a valid message for the Protobuf library.
    //
    // Example 1: Using `(required)` field validation constraint.
    //
    //     message MyOuterMessage {
    //         MyMessage field = 1 [(required) = true];
    //     }
    //
    bool required = 73812;

    // See `IfMissingOption`
    IfMissingOption if_missing = 73813;

    // Reserved 73814 and 73815 for deleted options `decimal_max` and `decimal_min`.

    // A higher boundary to the range of values of a number.
    MaxOption max = 73816;

    // A lower boundary to the range of values of a number.
    MinOption min = 73817;

    // See `DigitsOption`.
    DigitsOption digits = 73818;

    // See `TimeOption`.
    TimeOption when = 73819;

    // See `PatternOption`.
    PatternOption pattern = 73820;

    // Turns validation constraint checking for a value of a message, a map, or a repeated field.
    //
    // Default value is `false`.
    //
    // If set to `true`, the outer message declaring the annotated field would be valid if:
    //
    //   1. A message field value satisfies the validation constraints defined in the corresponding
    //      message type of the field.
    //
    //   2. Each value of a map entry satisfies validation constraints.
    //
    //   3. Each item of a repeated field satisfies validation constraints.
    //
    bool valid = 73821;

    // See `IfInvalidOption`.
    IfInvalidOption if_invalid = 73822;

    // See `GoesOption`.
    GoesOption goes = 73823;

    // Indicates that a field can only be set once.
    //
    // A typical use-case would include a value of an ID, which doesn't change over the course of
    // the life of an entity.
    //
    // Example 2: Using `(set_once)` field validation constraint.
    //
    //     message User {
    //         UserId id = 1 [(set_once) = true];
    //     }
    //
    // Once set, the `id` field cannot be changed.
    //
    bool set_once = 73824;

    // The option to mark a `repeated` field as a collection of unique elements.
    //
    // Example 3: Using `(distinct)` constraint for a repeated field.
    //
    //    message Blizzard {
    //
    //        // All snowflakes must be unique in this blizzard.
    //        //
    //        // Attempting to add a snowflake that is equal to an existing one would result
    //        // in constraint violation error.
    //        //
    //        repeated Snowflake = 1 [(distinct) = true];
    //    }
    //
    bool distinct = 73825;

    // The option to indicate that a numeric field is required to have a value which belongs
    // to the specified bounded range. For unbounded ranges, please use `(min)` and `(max) options.
    //
    // The range can be open (not including the endpoint) or closed (including the endpoint) on
    // each side. Open endpoints are indicated using a parenthesis (`(`, `)`). Closed endpoints are
    // indicated using a square bracket (`[`, `]`).
    //
    // Example 4: Defining ranges of numeric values.
    //
    //     message NumRanges {
    //         int32 hour = 1 [(range) = "[0..24)"];
    //         uint32 minute = 2 [(range) = "[0..59]";
    //         float degree = 3 [(range) = "[0.0..360.0)";
    //         double angle = 4 [(range) = "(0.0..180.0)";
    //     }
    //
    // NOTE: That definition of ranges must be consistent with the type they constrain.
    //       An range for an integer field must be defined with integer endpoints.
    //       A range for a floating point field must be defined with decimal separator (`.`),
    //       even if the endpoint value does not have a fractional part.
    //
    string range = 73826;

    // Reserved 73827 to 73849 for future validation options.

    // API Annotations
    //-----------------

    // Indicates a field which is internal to Spine, not part of the public API, and should not be
    // used by users of the framework.
    //
    // If you plan to implement an extension of the framework, which is going to be
    // wired into the framework, you may use the internal parts. Please consult with the Spine
    // team, as the internal APIs do not have the same stability API guarantee as public ones.
    //
    bool internal = 73850;

    // Reserved 73851 for the deleted SPI option.

    // Indicates a field that can change at any time, and has no guarantee of API stability and
    // backward-compatibility.
    //
    // Usage guidelines:
    // 1. This annotation is used only on public API. Internal interfaces should not use it.
    // 2. This annotation can only be added to new API. Adding it to an existing API is considered
    //    API-breaking.
    // 3. Removing this annotation from an API gives it stable status.
    //
    bool experimental = 73852;

    // Signifies that a public API is subject to incompatible changes, or even removal, in a future
    // release.
    //
    // An API bearing this annotation is exempt from any compatibility guarantees made by its
    // containing library. Note that the presence of this annotation implies nothing about the
    // quality of the API in question, only the fact that it is not "API-frozen."
    // It is generally safe for applications to depend on beta APIs, at the cost of some extra work
    // during upgrades.
    //
    bool beta = 73853;

    // Reserved 73854 to 73899 for future options.

    // Reference Option `by` for Enrichments
    // ---------------------------------------
    //
    // An instruction to associate an enrichment message field with the field from an event message
    // to enrich (or event context field).
    //
    // The value of the option is the name of the target event message/context field
    // which is used to set the corresponding enrichment's field.
    //
    // Example 5: Referencing enrichment source fields via `(by)` field option.
    //
    //     message MyEvent {
    //         spine.base.UserId user_id = 1;
    //     }
    //
    //     message MyEventEnrichment {
    //        option (enrichment_for) = "MyEvent";
    //
    //        string username = 1 [(by) = "user_id"];
    //     }
    //
    // The value of the `(by)` option may contain more than one field reference,
    // separated with the pipe character.
    //
    // Example 6: Referencing multiple enrichment source fields.
    //
    //     message FirstEvent {
    //         spine.base.UserId user_id = 1;
    //     }
    //
    //     message SecondEvent {
    //         string id = 1;
    //         spine.base.UserId admin_id = 1;
    //     }
    //
    //     message EnrichmentForSeveralEvents {
    //         option (enrichment_for) = "FirstEvent,SecondEvent";
    //
    //         string username = 1 [(by) = "user_id | admin_id"];
    //     }
    //
    // An field of an enrichment can be created taking a field of an event context as its source.
    // A context of an event is referenced via the "context" string.
    //
    // Example 7: Referencing event context fields.
    //
    //     message SomethingHappened {
    //         string target_id = 1;
    //     }
    //
    //     message InfoOnSomething {
    //         option (enrichment_for) = "SomethingHappened";
    //
    //         string target_name = 1 [(by) = "target_id"];
    //         string local_date_time = 2 [(by) = "context.timestamp"];
    //     }
    //
    // Please see the definition of the `spine.core.EventContext` message for names of the fields
    // that can be used with the `context` reference.
    //
    // Limitations
    // -----------
    // The `(by)` option cannot be used with map fields. If you need a map in an enrichment type,
    // please wrap it into a message type, providing corresponding field mapping function.
    //
    string by = 73900;
}

extend google.protobuf.MessageOptions {

    // Validation Constraints
    //------------------------

    // The default format string for validation error message text.
    //
    // This option extends message types that extend `FieldOptions`
    // The number of parameters and their types are determined by the type of field options.
    //
    string default_message = 73901;

    // The constraint to require at least one of the fields or a combination of fields.
    //
    // Unlike the `required` field constraint which always require corresponding field,
    // this message option allows to require alternative fields or a combination of them as
    // an alternative.
    //
    // Field names are separated using the pipe (`|`) symbol. The combination of fields is defined
    // using the ampersand (`&`) symbol.
    //
    // Example 7: Pipe syntax for defining alternative required fields.
    //
    //     message PersonName {
    //        option (required_field) = "given_name|honorific_prefix & family_name";
    //
    //        string honorific_prefix = 1;
    //        string given_name = 2;
    //        string middle_name = 3;
    //        string family_name = 4;
    //        string honorific_suffix = 5;
    //     }
    //
    string required_field = 73902;

    // See `EntityOption`.
    EntityOption entity = 73903;

    // An external validation constraint for a field.
    //
    // Allows to re-define validation constraints for a message when its usage as a field of
    // another type requires alternative constraints. This includes definition of constraints for
    // a message which does not have them defined within the type.
    //
    // A target field of an external constraint should be specified using a fully-qualified
    // field name (e.g. `mypackage.MessageName.field_name`).
    //
    // Example 8: Defining external validation constraint.
    //
    //     package io.spine.example;
    //
    //     // Defines a change in a string value.
    //     //
    //     // Both of the fields of this message are not `required` to be able to describe
    //     // a change from empty value to non-empty value, or from a non-empty value to
    //     // an empty string.
    //     //
    //     message StringChange {
    //
    //          // The value of the field that's changing.
    //          string previous_value = 1;
    //
    //          // The new value of the field.
    //          string new_value = 2;
    //     }
    //
    //     // A command to change a name of a task.
    //     //
    //     // The task has a non-empty name. A new name cannot be empty.
    //     //
    //     message RenameTask {
    //
    //          // The ID of the task to rename.
    //          string task_id = 1;
    //
    //          // Instruction for changing the name.
    //          //
    //          // The value of `change.previous_value` is the current name of the task.
    //          // It cannot be empty.
    //          //
    //          // The value of `change.new_value` is the new name of the task.
    //          // It cannot be empty either.
    //          //
    //          StringChange change = 1 [(valid) = true];
    //     }
    //
    //     // External validation constraint for both fields of the `StringChange` message
    //     // in the scope of the `RenameTask` command.
    //     //
    //     message RequireTaskNames {
    //          option (validation_of) = "spine.example.RenameTask.change";
    //          string previous_value = 1 [(required) = true];
    //          string new_value = 2 [(required) = true];
    //     }
    //
    // NOTE: A target field for an external validation constraint must be have the option `(valid)`
    //       set to `true`. See the definition of the `RenameTask.change` field in the example
    //       above. If there is no such option defined, or it is set to `false`, the external
    //       constraint will not be applied.
    //
    // External validation constraints can be applied to fields of several types.
    // To do so, separate fully-qualified references to these fields with with comma.
    //
    // Example 9: External validation constraints for multiple fields.
    //
    //     // External validation constraint for requiring a new value in renaming commands.
    //     message RequireNewName {
    //         option (validation_of) = "spine.example.RenameTask.change,"
    //                                  "spine.example.RenameProject.change,";
    //                                  "spine.example.UpdateComment.text_change;
    //         string new_value = 1 [(required) = true];
    //     }
    //
    // NOTE: An external validation constraint for a field must be defined only once.
    //       Spine Model Compiler does not check such an “overwriting”.
    //       See the issue: https://github.com/SpineEventEngine/base/issues/318.
    //
    string validation_of = 73904;

    // Reserved 73905 to 73910 for future validation options.

    // API Annotations
    //-----------------

    // Indicates a file which is internal to Spine, not part of the public API, and should not be
    // used by users of the framework.
    bool internal_type = 73911;

    // Indicates a file which contains elements of Service Provider Interface (SPI).
    bool SPI_type = 73912;

    // Indicates a public API that can change at any time, and has no guarantee of API stability and
    // backward-compatibility.
    bool experimental_type = 73913;

    // Signifies that a public API is subject to incompatible changes, or even removal,
    // in a future release.
    bool beta_type = 73914;

    // Specifies a characteristic inherent in the the given message type.
    //
    // Example 10: Using `(is)` message option.
    //
    //     message CreateProject {
    //         option (is).java_type = "ProjectCommand";
    //
    //         // Remainder omitted.
    //     }
    //
    // In the example above, `CreateProject` message is a `ProjectCommand`.
    //
    // To specify a characteristic for every message in a `.proto` file, use `(every_is)` file
    // option. If both `(is)` and `(every_is)` options are found, `(is)` value is taken.
    //
    // When targeting Java, specify the name of a Java interface to be implemented by this
    // message via `(is).java_type`.
    //
    IsOption is = 73915;

    // Reserved 73916 to 73921 for future API annotation options.

    // Enrichment Options
    //--------------------
    // An instruction to associate an enrichment message with event message(s) to enrich.
    //
    // If the event message to enrich is in another package, the event type name(s) should be
    // qualified according to Protobuf conventions.
    // If the enrichment is for multiple events, their type names should be separated with comma.
    //
    // Example 11: Using `(enrichment_for)` message option.
    //
    //     message MyEventEnrichment {
    //         option (enrichment_for) = "example.events.MyEvent";
    //         ...
    //     }
    //
    //     message EventEnrichmentForSeveralEvents {
    //         option (enrichment_for) = "example.events.FirstEvent,"
    //                                   "example.events.SecondEvent";
    //         ...
    //     }
    //
    // The enrichment can qualify for all messages within a package using suffix wildcard (*)
    // pattern. Infix and prefix wildcards are not supported.
    //
    // Example 12: Using package reference in the `(enrichment_for)` option.
    //
    //     message MyEnrichment {
    //         option (enrichment_for) = "example.events.*";
    //         ...
    //     }
    //
    // It is also possible to mix different declarations as follows:
    //
    //     message MyEnrichment {
    //         option (enrichment_for) = "example.events.*,"
    //                                   "secondExample.FirstEvent,"
    //                                   "thirdExample.*";
    //         ...
    //     }
    //
    string enrichment_for = 73922;

    // Reserved 73923 to 73939 for future options.

    // Command Options
    //-------------------

    // Specifies Protobuf type names of the events that are produced after a command is handled.
    //
    // The type names should be separated with commas. Space characters are allowed.
    // If the events are of the same aggregate with the command, non-qualified names can be used.
    // Otherwise, please use fully qualified names.
    //
    string events = 73939;

    // Specifies Protobuf type names of the rejections that can be returned to the attempt to handle
    // a command if business conditions do not allow the command execution.
    //
    // The type names should be separated with commas. Space characters are allowed.
    // If rejections are of the same aggregate with the command, non-qualified names can be used.
    // Otherwise, please use fully qualified names.
    //
    string rejections = 73940;
}

extend google.protobuf.FileOptions {

    // Specifies a type URL prefix for all types within a file.
    //
    // This type URL will be used when packing messages into `Any`.
    // See `any.proto` for more details.
    //
    string type_url_prefix = 73941;

    // Indicates a file which should not be used by users of the framework.
    bool internal_all = 73942;

    // Indicates a file which contains elements of Service Provider Interface (SPI).
    bool SPI_all = 73943;

    // Indicates a public API that can change at any time, and has no guarantee of API stability and
    // backward-compatibility.
    bool experimental_all = 73944;

    // Signifies that a public API is subject to incompatible changes, or even removal, in a future
    // release.
    bool beta_all = 73945;

    // Specifies a characteristic common for all the message types in the given file.
    //
    // Example 13: Marking all the messages using the `(every_is)` file option.
    // ```
    //     option (every_is).java_type = "ProjectCommand";
    //
    //     message CreateProject {
    //         // ...
    //
    //         message WithAssignee {
    //         // ...
    //         }
    //     }
    //
    //     message DeleteProject { /*...*/ }
    // ```
    //
    // In the example above, `CreateProject`, `CreateProject.WithAssignee`, and `DeleteProject`
    // messages are `ProjectCommand`-s.
    //
    // To specify a characteristic for a single message, use `(is)` message option. If both `(is)`
    // and `(every_is)` options are found, `(is)` value is taken.
    //
    // When targeting Java, specify the name of a Java interface to be implemented by these
    // message types via `(every_is).java_type`.
    //
    IsOption every_is = 73946;

    // Reserved 73947 to 73970 for future use.
}

extend google.protobuf.ServiceOptions {

    // Indicates that the service is a part of Service Provider Interface (SPI).
    bool SPI_service = 73971;

    // Reserved 73971 to 73980.
}

// Reserved 73981 to 74000 for other future Spine Options numbers.

//
// Validation Option Types
//---------------------------

// Defines the error handling for `required` field with no value set.
//
// Applies only to the fields marked as `required`.
// Validation error message is composed according to the rules defined by this option.
//
// Example 14: Using the `(if_missing)` option.
//
//    message Holder {
//        MyMessage field = 1 [(required) = true,
//                             (if_missing).msg_format = "This field is required."];
//    }
//
message IfMissingOption {

    // The default error message.
    option (default_message) = "Value must be set.";

    // A user-defined validation error format message.
    string msg_format = 1;
}

// The field value must be greater than or equal to the given minimum number.
//
// Is applicable only to numbers.
// Repeated fields are supported.
//
// Example 15: Defining lower boundary for a numeric field.
//
//     message KelvinTemperature {
//         double value = 1 [(min).value = "0.0"];
//     }
//
message MinOption {

    // The default error message format string.
    //
    // The format parameters are:
    //   1) "or equal to " string (if the `exclusive` parameter is false) or an empty string;
    //   2) the minimum number.
    //
    option (default_message) = "Number must be greater than %s %s.";

    // The string representation of the minimum field value.
    string value = 1;

    // Specifies if the field should be strictly greater than the specified minimum.
    //
    // The default value is false, i.e. the bound is inclusive.
    //
    bool exclusive = 2;

    // A user-defined validation error format message.
    string msg_format = 3;
}

// The field value must be less than or equal to the given maximum number.
//
// Is applicable only to numbers.
// Repeated fields are supported.
//
// Example 16: Defining upper boundary for a numeric field.
//
//     message Elevation {
//         double value = 1 [(max).value = "8848.00"];
//     }
//
message MaxOption {

    // The default error message format string.
    //
    // The format parameters are:
    //   1) "or equal to " string (if the `exclusive` parameter is false) or an empty string;
    //   2) the maximum number.
    //
    option (default_message) = "Number must be less than %s %s.";

    // The string representation of the maximum field value.
    string value = 1;

    // Specifies if the field should be strictly less than the specified maximum
    //
    // The default value is false, i.e. the bound is inclusive.
    //
    bool exclusive = 2;

    // A user-defined validation error format message.
    string msg_format = 3;
}

// The field value must be a number with the certain integral/fractional digit count.
//
// Is applicable only to numbers.
// Repeated fields are supported.
// This option is considered as not set if either `integer_max` or `fraction_max` parameter is not
// set (is zero).
//
// Example 17: Using the `(digits) constraint.
//
//     message Measurement {
//         double value = 1 [(digits).integer_max = 2, (digits).fraction_max = 2];
//     }
//
message DigitsOption {

    // The default error message format string.
    //
    // The format parameters are:
    //   1) max integral digit count;
    //   2) max fractional digit count;
    //
    option (default_message) = "Number value is out of bounds, expected: <%s max digits>.<%s max digits>.";

    // Maximum count of integral digits of the number (inclusive).
    //
    // Must be greater than zero.
    //
    uint32 integer_max = 1;

    // Maximum count of fractional digits of the number (inclusive).
    //
    // Must be greater than or equal to zero.
    //
    uint32 fraction_max = 2;

    // A user-defined validation error format message.
    string msg_format = 3;
}

// The field value is a `Timestamp` which points to the moment in the future or the past.
//
// Is applicable only to `Timestamp`s.
// Repeated fields are supported.
//
// Example 18: Using `(when)` option.
//
//     message ScheduleMeeting {
//         google.protobuf.Timestamp start = 1 [(when).in = FUTURE];
//     }
//
message TimeOption {

    // The default error message format string.
    //
    // The format parameter is "past" or "future" string, depending on the restriction.
    //
    option (default_message) = "Timestamp value must be in the %s.";

    // Defines a restriction for the timestamp.
    Time in = 1;

    // A user-defined validation error format message.
    string msg_format = 2;
}

// This enumeration defines restriction for date/time values.
enum Time {

    // The default value (if the time option is not set).
    TIME_UNDEFINED = 0;

    // The value must be in the past.
    PAST = 1;

    // The value must be in the future.
    FUTURE = 2;
}

// A string field value must match the given regular expression.
// Is applicable only to strings.
// Repeated fields are supported.
//
// Example 19: Using the `(pattern)` option.
//
//     message CreateAccount {
//         string id = 1 [(pattern).regex = "^[A-Za-z0-9+]+$"];
//     }
//
message PatternOption {

    // The default error message format string.
    //
    // The format parameter is the regular expression to which the value must match.
    //
    option (default_message) = "String must match the regular expression '%s'.";

    // The regular expression to match.
    string regex = 1;

    // The regex flag.
    int32 flag = 2;

    // A user-defined validation error format message.
    string msg_format = 3;
}

// Specifies the message to show if a validated field happens to be invalid.
// Is applicable only to messages.
// Repeated fields are supported.
//
// Example 20: Using the `(if_invalid)` option.
//
//     message Holder {
//         MyMessage field = 1 [(valid) = true, (if_invalid).msg_format = "The field is invalid."];
//    }
//
message IfInvalidOption {

    // The default error message for the field.
    option (default_message) = "Message must have valid properties.";

    // A user-defined validation error format message.
    string msg_format = 1;
}

// Specifies that a message field can be present only if another field is present.
//
// Unlike the `required_field` that handles combination of required fields, this option is useful
// when it is needed to say that an optional field makes sense only when another optional field is
// present.
//
// Example 21: Requiring mutual presence of optional fields.
//
//    message ScheduledItem {
//        ...
//        spine.time.LocalDate date = 4;
//        spine.time.LocalTime time = 5 [(goes).with = "date"];
//    }
//
message GoesOption {

    // The default error message format string.
    //
    // The first parameter is the name of the field for which we specify the option.
    // The second parameter is the name of the field set in the "with" value.
    //
    option (default_message) = "The field '%s' can only be set when the field '%s' is defined.";

    // A name of the field required for presence of the field for which we set the option.
    string with = 1;

    // A user-defined validation error format message.
    string msg_format = 2;
}

// Defines options of a message representing a state of an entity.
message EntityOption {

    // A type of an entity for state of which the message is defined.
    enum Kind {
        // Reserved for errors.
        KIND_UNKNOWN = 0;

        // The message is an aggregate state.
        AGGREGATE = 1;

        // The message is a state of a projection.
        PROJECTION = 2;

        // The message is a state of a process manager.
        PROCESS_MANAGER = 3;

        // The message is a state of an entity.
        ENTITY = 4;
    }

    // The type of the entity.
    Kind kind = 1;

    // The level of visibility of the entity to queries.
    enum Visibility {

        // Reserved for errors.
        VISIBILITY_UNKNOWN = 0;

        // The entity is not visible to queries.
        NONE = 1;

        // Client-side applications can subscribe to updates of entities of this type.
        SUBSCRIBE = 2;

        // Client-side applications can query this type of entities.
        QUERY = 3;

        // Client-side applications can subscribe and query this type of entity.
        FULL = 4;
    }

    // The visibility of the entity.
    //
    // If not defined, the value of this option is `FULL`.
    //
    Visibility visibility = 2;
}

// Defines a marker for a given type or a set of types.
//
// The option may be used in two modes:
//   - with the marker code generation;
//   - without the marker code generation.
//
// When used with the code generation, language-specific markers are generated by the Protobuf
// compiler. Otherwise, it is expected that the user creates such markers manually.
//
message IsOption {

    // Enables the generation of marker interfaces.
    //
    // The generation is disabled by default.
    bool generate = 1;

    // The reference to a Java interface.
    //
    // May be an fully-qualified or a simple name. In the latter case, the interface should belong
    // to the same
    // Java package as the message class which implements this interface.
    //
    // The framework does not ensure the referenced type exists.
    // If the generation is disabled, the Java type is used as-is. Otherwise, a corresponding Java
    // interface is generated.
    //
    // A generated interface has no declared methods and extends `com.google.protobuf.Message`.
    //
    // The `.java` file is placed alongside with the code generated by the proto-to-java compiler.
    //
    // If fully-qualified name given, the package of the generated type matches the fully-qualified
    // name. When a simple name is set in the option, the package of the interface matches the
    // package of the message class.
    //
    string java_type = 2;
}

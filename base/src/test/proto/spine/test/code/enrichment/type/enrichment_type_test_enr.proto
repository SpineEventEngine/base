/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.test.code.enrichment.type;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.test.code.enrichment.type";
option java_outer_classname = "EnrichmentTypeTestProto";
option java_multiple_files = true;

// A name of a person.
//
// This type is a copy of `spine.people.PersonName` to avoid dependency.
//
message PersonName {

    // A minimum requirement to refer to a person.
    option (required_field) = "given_name|honorific_prefix & family_name";

    // The honorific prefix (such as "Dr." or "Prof.") for this person.
    string honorific_prefix = 1;

    // The given (first) name of the person.
    string given_name = 2;

    // The middle name or the patronymic of this person.
    string middle_name = 3;

    // The family (last) name of the person.
    string family_name = 4;

    // The honorific suffixes (such as "Jr.") for this person.
    string honorific_suffix = 5;
}

// This is an enrichment for an event defined in another package.
message EttOnAnotherPackageMessage {
    option (enrichment_for) = "spine.test.code.enrichment.type.event.EttProjectCreated";

    string project_name = 1 [(by) = "project_id"];
}

// The enrichment for all the event declared in "user.permission" package and
// referencing user who is able to grant permissions.
message EttFieldSelection {
    option (enrichment_for) = "spine.test.code.enrichment.type.user.permission.*";

    PersonName granter_name = 1 [(by) = "granter_uid"];
}

// The enrichment for all the events declared in the `spine.test.code.enrichment.type.user.*`
// package, including nested sub-packages.
//
message EttOnDeepPackage {
    option (enrichment_for) = "spine.test.code.enrichment.type.user.*";

    string time_zone = 1 [(by) = "user_uid"];
}

/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.test.enrichment.type;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.test.enrichment.type";
option java_outer_classname = "EnrichmentTypeTestInvalidDeclProto";
option java_multiple_files = true;

// This enrichment declaration is invalid because there is no type it references.
message EttWrongDirectTypeRef {
    option (enrichment_for) = "there.is.no.SuchType";
    string value = 1 [(by) = "id"];
}

message EttWrongPackageRef {
    option (enrichment_for) = "nowhere.pack.*";
    string value = 1 [(by) = "id"];
}

message EttEnrichmentSource {
    string id = 1;
    string name = 2;
}

// This is wrongly declared enrichment type because it reference a field which is not declared
// in the referenced type.
message EttWrongFieldRef {
    option (enrichment_for) = "EttEnrichmentSource";
    string value = 1 [(by) = "description"];
}

message EttDoubledFieldRef {
    option (enrichment_for) = "EttEnrichmentSource";
    string value = 1 [(by) = "id | name"];
}

message EttAnotherSource {
    string uuid = 1;
}

// This is invalid declaration because none of the field references match the second source type.
message EttWrongAltFieldRef {
    option (enrichment_for) = "EttEnrichmentSource, EttAnotherSource";
    string name = 1  [(by) = "context.actor"];
    string description = 2 [(by) = "name | id"];
}

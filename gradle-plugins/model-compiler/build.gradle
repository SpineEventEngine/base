import java.nio.file.Files
import java.nio.file.StandardCopyOption

//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

ext {
    roasterVersion = '2.20.0.Final'
    spineFolder = "${project.projectDir}/.spine" as File
    protocPluginDependency = null
}

group = 'io.spine.tools'

buildscript {
    apply from: "$rootDir/ext.gradle"

    repositories {
        mavenCentral()
        mavenLocal()
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath(group: 'com.google.protobuf',
                  name: 'protobuf-gradle-plugin',
                  version: protobufGradlePluginVerison) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
    }

    configurations.all({
        resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    })
}

apply plugin: 'com.google.protobuf'
apply from: generateDescriptorSetScript

dependencies {
    compile project(':plugin-base')
    compile project(':base')

    compile group: 'com.squareup', name: 'javapoet', version: javaPoetVersion
    compile group: 'com.google.template', name: 'soy', version: '2017-02-01'
    compile group: 'com.google.guava', name: 'guava', version: guavaVersion
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: protobufVersion
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: protobufVersion

    // A library for parsing Java sources.
    // Used for parsing Java sources generated from Protobuf files
    // to make their annotation more convenient.
    compile group: 'org.jboss.forge.roaster', name: 'roaster-api', version: roasterVersion
    compile group: 'org.jboss.forge.roaster', name: 'roaster-jdt', version: roasterVersion

    compile project(':testutil-base')
    testCompile group: 'com.google.guava', name: 'guava-testlib', version: guavaVersion
    testCompile gradleTestKit()
    testCompile project(':plugin-base').sourceSets.test.output // Test classes of `plugin-base`

    // "tools.jar" contains Javadoc classes used in the rejections Javadoc generation tests.
    // It is a local version bundled within the JDK installation.
    // "JAVA_HOME" environment variable must be set for correct work.
    testCompile files("${System.properties['java.home']}/../lib/tools.jar")

    // The freshest version of the plugin required for tests
    protocPluginDependency = testCompile "io.spine.tools:spine-protoc-plugin:$spineVersion@jar"
}

protobuf {
    generatedFilesBaseDir = generatedRootDir

    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
}

/**
 * Prepares the spine_protoc.gradle file by copying it to the `resources` directory and injecting
 * the versions of the protoc plugin dependencies.
 *
 * <p>This task is executed each time `processResources` task is executed, i.e. upon each build.
 */
task prepareProtocConfig(type: Copy) {
    description = "Prepares the spine_protoc.gradle file"
    
    from "./spine_protoc.gradle"
    into "./src/main/resources"

    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['baseVersion': "'$project.spineVersion'".toString(),
                                                                'pbVersion': "'$project.protobufVersion'".toString(),
                                                                'gRPCVersion': "'$project.gRpcVersion'".toString()])

    outputs.upToDateWhen { false }
}

processResources.dependsOn prepareProtocConfig

final def copyPluginJarAction = {
    final def from = configurations.testCompile.fileCollection(protocPluginDependency).singleFile
    final def srcPath = from.toPath()
    final def dest = project.spineFolder.toPath().resolve(from.name)
    dest.toFile().mkdirs()
    Files.copy(srcPath, dest, StandardCopyOption.REPLACE_EXISTING)
}

// We cannot use standard Copy task here as it resolves the `from` property not lazily.
// Since we use use a dependency in the `from`, it may cause some issues with the Maven plugin
// See https://discuss.gradle.org/t/right-way-to-copy-contents-from-dependency-archives/7449
task copyProtocPluginTestArtifact {
    description = "Spawns the Spine Protoc plugin artifact in the project directory for tests"
}

copyProtocPluginTestArtifact.doLast(copyPluginJarAction)
copyProtocPluginTestArtifact.dependsOn project.project(':protoc-plugin').publishToMavenLocal

// Tests use the Protobuf plugin.
test {
    dependsOn copyProtocPluginTestArtifact
    dependsOn publishToMavenLocal
    dependsOn project.project(':plugin-base').publishToMavenLocal
    dependsOn project.project(':base').publishToMavenLocal
    dependsOn project.project(':testutil-base').publishToMavenLocal
}

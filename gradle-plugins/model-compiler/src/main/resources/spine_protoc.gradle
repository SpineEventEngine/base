import java.nio.file.Files
import java.nio.file.StandardCopyOption

/*
 * Copyright 2017, TeamDev Ltd. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

final def spineModelCompilerVersion = '0.9.52-SNAPSHOT'
final def protobufVersion = '3.3.0'
final def gRpcVersion = '1.5.0'

buildscript {
    ext {
        protocPluginDependency = null
    }
}

configurations {
    fetch {
        description = "Fetches the required artifacts at compile time"
    }
}

repositories {
    maven {
        url = 'http://maven.teamdev.com/repository/spine'
    }
    maven {
        url = 'http://maven.teamdev.com/repository/spine-snapshots'
    }
    mavenCentral()
    mavenLocal()
}

dependencies {
    protocPluginDependency = fetch "io.spine.tools:spine-protoc-plugin:$spineModelCompilerVersion@jar"
}

ext {
    runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
    spineFolder = ("$project.projectDir/.spine" as File).toPath()
    rootSpineFolder = ("$project.rootDir/.spine" as File).toPath()
}

final def copyPluginJarAction = {
    final def from = pluginJar()
    final def dest = project.spineFolder.resolve(from.name)
    final def rootDest = project.rootSpineFolder.resolve(from.name)
    final def srcPath = from.toPath()
    copy(srcPath, dest)
    copy(srcPath, rootDest)
}

def copy(final from, final to) {
    to.toFile().mkdirs()
    Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING)
}

task copyPluginJar { }

copyPluginJar.doLast(copyPluginJarAction)

def pluginJar() {
    return configurations.fetch.fileCollection(protocPluginDependency).singleFile
}

protobuf {
    generatedFilesBaseDir = "$projectDir/generated"

    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }

    //noinspection GroovyAssignabilityCheck
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$gRpcVersion"
        }
        spineProtoc {
            final def scriptExt = runsOnWindows ? 'bat' : 'sh'
            artifact = "io.spine.tools:spine-protoc-plugin:$spineModelCompilerVersion:script@${scriptExt}"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc { }
                spineProtoc {
                    outputSubDir = 'java'
                }
            }
            task.generateDescriptorSet = true
            final def descPath = (task.sourceSet.name.contains("test")
                                        ? project.extensions.getByName("modelCompiler").testDescriptorSetPath
                                        : project.extensions.getByName("modelCompiler").mainDescriptorSetPath) ?:
                                 "${projectDir}/build/descriptors/${task.sourceSet.name}.desc"
            task.descriptorSetOptions.path = descPath
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.includeSourceInfo = true

            task.dependsOn copyPluginJar
        }
    }
}

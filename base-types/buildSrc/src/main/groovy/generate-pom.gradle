/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
//file:noinspection GroovyVariableCanBeFinal

import groovy.xml.MarkupBuilder
import org.gradle.api.internal.artifacts.dependencies.AbstractExternalModuleDependency

import java.util.function.Function

import static java.util.stream.Collectors.toSet

/**
 * This script generates a {@code pom.xml} file that contains dependencies of the root project as
 * well as the dependencies of its subprojects.
 *
 * The generated {@code pom.xml} is not usable for {@code maven} build tasks and is merely a
 * description of project dependencies.
 *
 * Configures the {@code build} task to generate the {@code pom.xml} file.
 *
 * To generate the pom, {@code apply} from this file.
 *
 * Note that the generated {@code pom.xml} includes the group ID, artifact ID and the version of the
 * project this script was applied to. In case you want to override the default values, do so in
 * the {@code ext} block like so:
 *
 * <pre>
 * {@code
 * ext {
 *     groupId = 'custom-group-id'
 *     artifactId = 'custom-artifact-id'
 *     version = 'custom-version'
 * }
 * }
 * </pre>
 *
 * By default, those values are taken from the {@code project} object, which may or may not include
 * them. If the project does not have these values and they are not specified in the {@code ext}
 * block, the result {@code pom.xml} file is going to contain empty blocks,
 * e.g. {@code <groupId></groupId>}
 */

// In some cases, the `base` plugin, which is by default is added by e.g. `java`, is not yet added.
// `base` plugin defines the `build` task. This script needs it.
apply plugin: 'base'

ext {
    pomFile = "${projectDir}${File.separator}pom.xml"
}

task generatePom {

    doLast {
        delete pomFile
        final ExtraPropertiesExtension extension = rootProject.ext
        final RootProjectData projectData = RootProjectData.fromEither(project, extension)
        final ProjectPomXml result = ProjectPomXml.from(projectData)
        result.writeTo(pomFile)
    }
}

build.finalizedBy generatePom
generatePom.dependsOn assemble

/**
 * A {@code pom.xml} file that contains dependencies of the project and its subprojects.
 *
 * <p>It is not usable for {@code maven} build tasks and serves as a description of project first
 * level dependencies, i.e. transitive dependencies are not included
 */
class ProjectPomXml {

    private static final String XML_METADATA = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
    private static final String PROJECT_SCHEMA_LOCATION = "<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"" +
            "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"
    private static final String MODEL_VERSION = "<modelVersion>4.0.0</modelVersion>"
    private static final String CLOSING_PROJECT_TAG = "</project>"
    private static final String SPINE_INCEPTION_YEAR = "2015"
    private static final String NEW_LINE = System.lineSeparator()

    private final Project project
    private final String groupId
    private final String artifactId
    private final String version

    private ProjectPomXml(final Project project,
                          final String groupId,
                          final String artifactId,
                          final String version) {
        this.project = project
        this.groupId = groupId
        this.artifactId = artifactId
        this.version = version
    }

    /** Creates a new instance based on the specified project data. */
    static ProjectPomXml from(final RootProjectData projectData) {
        return new ProjectPomXml(projectData.project(),
                projectData.groupId(),
                projectData.artifactId(),
                projectData.version())
    }

    /**
     * Writes the {@code pom.xml} file containing dependencies of this project and its subprojects to the specified
     * location.
     *
     * <p>If a file with the specified location exists, its contents will be substituted with a new
     * {@code pom.xml}.
     *
     * @param filePath path to write {@code pom.xml} file to
     */
    void writeTo(final String filePath) {
        final FileWriter fileWriter = new FileWriter(filePath)
        final StringWriter stringWriter = new StringWriter()
        writeHeader(stringWriter)

        writeBlocks(stringWriter,
                describingComment(),
                rootProjectData(),
                inceptionYear(),
                licence(),
                projectDependencies()
        )
        fileWriter.write(stringWriter.toString())
        fileWriter.close()
    }

    /**
     * Writes the specified lines using the specified writer, dividing them by platforms line
     * separator.
     *
     * The written lines are also padded with platforms line separator from both sides
     */
    static void writeBlocks(final StringWriter writer, final String... lines) {
        writer.write(NEW_LINE)
        for (final String line : lines) {
            writer.write(line)
            writer.write(NEW_LINE)
            writer.write(NEW_LINE)
        }
        writer.write(NEW_LINE)
    }

    /**
     * Obtains a String that represents a tag with the inception year of Spine.
     */
    private static String inceptionYear() {
        final Writer writer = new StringWriter()
        final MarkupBuilder xmlBuilder = new MarkupBuilder(writer)
        xmlBuilder.inceptionYear(SPINE_INCEPTION_YEAR)
        return writer.toString()
    }

    /**
     * Obtains licence information about Spine.
     *
     * <p>More on licences <a href="https://maven.apache.org/pom.html#Licenses">here</a>.
     */
    private static String licence() {
        final Writer writer = new StringWriter()
        SpineLicenceAsXml.writeUsing(writer)
        return writer.toString()
    }

    /**
     * Obtains a string that contains project dependencies as XML.
     *
     * <p>Obtained string also contains a closing project tag.
     */
    private String projectDependencies() {
        Writer writer = new StringWriter()
        ProjectDependenciesAsXml projectDeps = ProjectDependenciesAsXml.of(project)
        projectDeps.writeUsing(writer)
        writer.write(NEW_LINE)
        writer.write(CLOSING_PROJECT_TAG)
        return writer.toString()
    }

    /**
     * Obtains a description comment that describes the nature of the generated {@code pom.xml} file.
     */
    private static String describingComment() {
        String description =
                System.lineSeparator() +
                        "This file was generated using the Gradle `generatePom` task. " +
                        System.lineSeparator() +
                        "This file is not suitable for `maven` build tasks. It only describes the " +
                        "first-level dependencies of " +
                        System.lineSeparator() +
                        "all modules and does not describe the project " +
                        "structure per-subproject." +
                        System.lineSeparator()
        String descriptionComment =
                String.format("<!-- %s %s %s -->",
                        System.lineSeparator(),
                        description,
                        System.lineSeparator())
        return descriptionComment
    }

    /**
     * Obtains a string that contains the name and the version of the current project.
     */
    private String rootProjectData() {
        Writer writer = new StringWriter()
        MarkupBuilder xmlBuilder = new MarkupBuilder(writer)
        xmlBuilder.groupId(this.groupId)
        xmlBuilder.artifactId(this.artifactId)
        xmlBuilder.version(this.version)
        return writer.toString()
    }

    /**
     * Writes the XML metadata using the specified writer.
     */
    private static void writeHeader(StringWriter stringWriter) {
        stringWriter.write(XML_METADATA)
        stringWriter.write(System.lineSeparator())
        stringWriter.write(PROJECT_SCHEMA_LOCATION)
        stringWriter.write(System.lineSeparator())
        stringWriter.write(MODEL_VERSION)
        stringWriter.write(System.lineSeparator())
    }
}

/**
 * Dependencies of the project expressed as XML.
 *
 * <p>Subprojects dependencies are included, transitive dependencies are not included.
 *
 * <p>Example:
 * <pre>
 * {@code
 *  <dependencies>
 *      <dependency>
 *          <groupId>io.spine</groupId>
 *          <artifactId>base</artifactId>
 *          <version>1.0.0-pre7</version>
 *}
 * </pre>
 */
class ProjectDependenciesAsXml {

    private final Set<DependencyWithScope> firstLevelDependencies

    private ProjectDependenciesAsXml(Set<DependencyWithScope> dependencySet) {
        this.firstLevelDependencies = new TreeSet<>(dependencySet)
    }

    /** Creates a new instance based on the specified project. */
    static ProjectDependenciesAsXml of(Project project) {
        Set<DependencyWithScope> dependencies = projectDependencies(project)
        return new ProjectDependenciesAsXml(dependencies)
    }

    /**
     * Writes the dependencies using the specified writer.
     *
     * <p>Used writer will not be closed.
     */
    void writeUsing(Writer writer) {
        MarkupBuilder xmlBuilder = new MarkupBuilder(writer)
        xmlBuilder.dependencies() {
            firstLevelDependencies
                    .forEach { projectDep ->
                        xmlBuilder.dependency {
                            groupId(projectDep.dependency().group)
                            artifactId(projectDep.dependency().name)
                            version(projectDep.dependency().version)
                            if (projectDep.hasDefinedScope()) {
                                scope(projectDep.scopeName())
                            }
                        }
                    }
        }
    }

    private static Set<DependencyWithScope> projectDependencies(Project project) {
        Set<DependencyWithScope> firstLevelDependencies = new HashSet<>()
        firstLevelDependencies.addAll(dependenciesFromAllConfigurations(project))
        project.subprojects.forEach { subproject ->
            Set<DependencyWithScope> subprojectDeps = dependenciesFromAllConfigurations(subproject)
            firstLevelDependencies.addAll(subprojectDeps)
        }
        return firstLevelDependencies.stream().sorted().distinct().collect(toSet())
    }

    private static Set<DependencyWithScope> dependenciesFromAllConfigurations(Project project) {
        Set<DependencyWithScope> result = new HashSet<>()
        project.configurations.forEach { c ->
            def configuration = c
            if (isResolvable(c)) {
                // Force configuration resolution.
                configuration.resolvedConfiguration
            }
            configuration.dependencies.forEach {
                if (isExternal(it)) {
                    DependencyWithScope dependency = DependencyWithScope.of(it, configuration)
                    result.add(dependency)
                }
            }
        }
        return result
    }

    static boolean isResolvable(Configuration config) {
        config.hasProperty("canBeResolved") && config.canBeResolved
    }

    private static boolean isExternal(Dependency dependency) {
        return AbstractExternalModuleDependency.isAssignableFrom(dependency.class)
    }
}

/**
 * A project dependency with its scope.
 *
 * @see
 * <a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html#Dependency_Scope">
 *     More on dependency scopes </a>.
 */
class DependencyWithScope implements Comparable<DependencyWithScope> {

    private final Dependency dependency
    private final DependencyScope scope

    /**
     * A map that contains the relations of known Gradle configuration names
     * to their Maven dependency scope equivalents.
     */
    private static Map<String, DependencyScope> CONFIG_TO_SCOPE


    /**
     * Performs comparison of {@code DependencyWithScope} instances based on the following rules:
     *
     * <ul>
     *     <li>Compares the scope of the dependency first. Dependencies with lower scope
     *     {@linkplain #dependencyPriority priority} number goes first.
     *     <li>For dependencies with same scope does the lexicographical group name comparison.
     *     <li>For dependencies within the same group does the lexicographical artifact
     *     name comparison.
     *     <li>For dependencies with the same artifact name does the lexicographical artifact
     *     version comparison.
     * </ul>
     */
    private static final Comparator<DependencyWithScope> COMPARATOR = Comparator
            .comparingInt { it.dependencyPriority() }
            .thenComparing((Function<DependencyWithScope, String>) { it.dependency().group })
            .thenComparing((Function<DependencyWithScope, String>) { it.dependency().name })
            .thenComparing((Function<DependencyWithScope, String>) { it.dependency().version })

    static {
        final DependencyScope compile = DependencyScope.compile
        final DependencyScope runtime = DependencyScope.runtime
        final DependencyScope provided = DependencyScope.provided

        CONFIG_TO_SCOPE = new HashMap<>()

        /*
         * Configurations from the Gradle Java plugin that are known to be mapped to the `compile`
         * scope.
         *
         * Dependencies with the `compile` Maven scope are propagated to dependent projects.
         *
         * More at https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations
         */
        CONFIG_TO_SCOPE.put("compile", compile)
        CONFIG_TO_SCOPE.put("implementation", compile)
        CONFIG_TO_SCOPE.put("api", compile)

        /*
         * Configurations from the Gradle Java plugin that are known to be mapped to the `runtime`
         * scope.
         *
         * Dependencies with the `runtime` Maven scopes are required for execution only.
         */
        CONFIG_TO_SCOPE.put("runtime", runtime)
        CONFIG_TO_SCOPE.put("runtimeOnly", runtime)
        CONFIG_TO_SCOPE.put("runtimeClasspath", runtime)
        CONFIG_TO_SCOPE.put("default", runtime)


        /*
         * Configurations from the Gradle Java plugin that are known to be mapped to the `provided`
         * scope.
         *
         * Dependencies with the `provided` Maven scope are not propagated to dependent projects
         * but are required during the compilation.
         */
        CONFIG_TO_SCOPE.put("compileOnly", provided)
        CONFIG_TO_SCOPE.put("compileOnlyApi", provided)
        CONFIG_TO_SCOPE.put("annotationProcessor", provided)
    }

    private DependencyWithScope(Dependency dependency, DependencyScope scope) {
        this.dependency = dependency
        this.scope = scope
    }

    /**
     * Creates a new instance based on the specified dependency and its configuration.
     *
     * <p>The scope of the dependency is based on the name of the configuration.
     */
    static DependencyWithScope of(Dependency dependency, Configuration configuration) {
        String configurationName = configuration.name
        if (CONFIG_TO_SCOPE.containsKey(configurationName)) {
            return new DependencyWithScope(dependency, CONFIG_TO_SCOPE.get(configurationName))
        }
        if (configurationName.toLowerCase().startsWith("test")) {
            return new DependencyWithScope(dependency, DependencyScope.test)
        }
        return new DependencyWithScope(dependency, DependencyScope.undefined)
    }

    /**
     * Obtains the layout priority of a scope.
     *
     * Layout priority determines what scopes come first in the generated {@code pom.xml} file.
     * Dependencies with a lower priority number go on top.
     */
    int dependencyPriority() {
        switch(scope) {
            case DependencyScope.compile:
                return 0
            case DependencyScope.runtime:
                return 1
            case DependencyScope.test:
                return 2
            default:
                return 3
        }
    }

    /** Obtains the scope name of this dependency .*/
    String scopeName() {
        return scope.name()
    }

    /** Obtains the Gradle dependency. */
    Dependency dependency() {
        return this.dependency
    }

    /** Obtains the Maven scope of this dependency. */
    DependencyScope scope() {
        return this.scope
    }

    /**
     * Returns {@code true} if this dependency has a defined scope, returns {@code false} otherwise.
     */
    boolean hasDefinedScope() { return scope != DependencyScope.undefined }

    @Override
    boolean equals(o) {
        if (this.is(o)) return true
        if (getClass() != o.class) return false

        DependencyWithScope that = (DependencyWithScope) o

        if (dependency.group != that.dependency.group) return false
        if (dependency.name != that.dependency.name) return false
        if (dependency.version != that.dependency.version) return false

        return true
    }

    @Override
    int hashCode() {
        int result = (dependency != null ? dependency.hashCode() : 0)
        return result
    }

    @Override
    int compareTo(DependencyWithScope o) {
        return COMPARATOR.compare(this, o)
    }

    /**
     * A Maven dependency scope.
     */
    static enum DependencyScope {
        undefined,
        compile,
        provided,
        runtime,
        test,
        system
        /*
        `import` is also a scope, however, it can't be used outside the `<dependencyManagement>`
        section, which is outside of the scope of this script
       */
    }
}

/**
 * Information about the licences used by Spine in XML form.
 */
class SpineLicenceAsXml {

    private static final String NAME = "Apache License, Version 2.0"
    private static final String URL = "https://www.apache.org/licenses/LICENSE-2.0.txt"
    private static final String DISTRIBUTION = "repo"

    /** Prevents instantiation. */
    private SpineLicenceAsXml() {
    }

    /**
     * Writes information about the Spine licence using the specified writer.
     */
    static void writeUsing(Writer fileWriter) {
        MarkupBuilder xmlBuilder = new MarkupBuilder(fileWriter)
        xmlBuilder.licenses {
            license {
                name(NAME)
                url(SpineLicenceAsXml.URL)
                distribution(DISTRIBUTION)
            }
        }
    }
}

/**
 * Information about the root project.
 *
 * <p>Root project is the project for which the {@code generatePom} is executed.
 *
 * <p>Includes group ID, artifact name and the version.
 */
class RootProjectData {

    private final Project project
    private final String groupId
    private final String artifactId
    private final String version

    private RootProjectData(Project project, String group, String artifactId, String version) {
        this.project = project
        this.groupId = group
        this.artifactId = artifactId
        this.version = version
    }

    /**
     * Creates a new instance.
     *
     * <p>Data from the specified project is prioritized.
     * If a property (group ID, artifact name or version) is not found in the project,
     * it is taken from the specified extension.
     */
    static RootProjectData fromEither(Project project, /* or */ ExtraPropertiesExtension extension) {
        boolean groupMissingFromProject = project.group == null || project.group.isEmpty()
        boolean nameMissingFromProject = project.name == null || project.name.isEmpty()
        boolean versionMissingFromProject = project.version == null || project.version.isEmpty()

        String groupId = groupMissingFromProject ? extension.groupId : project.group
        String name = nameMissingFromProject ? extension.artifactId : project.name
        String version = versionMissingFromProject ? extension.version : project.version

        return new RootProjectData(project, groupId, name, version)
    }

    /** Obtains the project object matching the root project. */
    Project project() {
        return this.project
    }

    /** Obtains the group ID of the root project. */
    String groupId() {
        return this.groupId
    }

    /** Obtains the artifact ID of the root project. */
    String artifactId() {
        return this.artifactId
    }

    /** Obtains the version of the root project. */
    String version() {
        return this.version
    }
}

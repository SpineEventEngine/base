syntax = "proto3";

package spine.tools.protoc;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.tools.protoc";
option java_outer_classname = "ConfigProto";
option java_multiple_files = true;

option (internal_all) = true;

// Interface implementation task for Protobuf UUID messages.
//
// Specifies which interface Protobuf message that are labeled as UUID messages should implement.
//
// An empty interface name signifies that no interface should be implemented.
//
message UuidImplementInterface {

    // A fully-qualified name of the message interface class.
    string interface_name = 1;
}

// Interface implementation task for Protobuf messages that match a certain file pattern.
//
// Specifies which interface Protobuf messages that match a specified file pattern selector should
// implement.
//
// An empty interface name signifies that no interface should be implemented.
//
message ImplementInterface {

    // A fully-qualified name of the message interface class.
    string interface_name = 1;

    // A file pattern that defines which message types should implement the interface.
    FilePattern pattern = 2;
}

// Method generation task for Protobuf UUID messages.
//
// Specifies which method factory should be used for method generation for Protobuf messages
// that are labeled as UUID messages.
//
// An empty value signifies that the additional methods should not be generated.
//
message UuidGenerateMethod {

    // A fully-qualified name of the message factory class.
    string factory_name = 1;
}

// Method generation task for Protobuf messages that match a certain file pattern.
//
// Specifies which method factory should be used for method generation applied to Protobuf messages
// that match specified file pattern selector.
//
// An empty factory name signifies that the additional methods should not be generated.
//
message GenerateMethod {

    // A fully-qualified name of the message factory class.
    string factory_name = 1;

    // A file pattern that defines for which message types the message factory should be called.
    FilePattern pattern = 2;
}

// File pattern which is used to filter messages.
//
message FilePattern {

    oneof value {

        // An ending that a .proto file's full name should end with.
        //
        // If a .proto file matches the postfix, some code generation will be applied to all its
        // messages.
        //
        string file_postfix = 1;

        // A prefix that a .proto file's full name should start with.
        //
        // If a .proto file matches the prefix, some code generation will be applied to all its
        // messages.
        //
        string file_prefix = 2;

        // A regex a .proto file's full name should match.
        //
        // If a .proto file matches the regex, some code generation will be applied to all its
        // messages.
        //
        string regex = 3;
    }
}

// Configuration of the Spine Protoc plugin interfaces generation.
//
message InterfacesGeneration {

    repeated ImplementInterface implement_interface = 1;

    UuidImplementInterface uuid_interface = 2;

    // Reserved for future configurations.
    reserved 4 to 15;
}

// A container for the java classpath items.
//
message Classpath {

    // An absolute OS-dependent path to a particular classpath JAR.
    repeated string jar = 1;
}

// Method factories configuration.
//
// Allows {@code MethodFactory} instances to be loaded from the project classpath.
//
message MethodFactoryConfiguration {

    // Java classpath of a project for which code generation is performed
    Classpath classpath = 1;
}

// Configuration of the Spine Protoc plugin methods generation.
//
message MethodsGeneration {

    repeated GenerateMethod generate_method = 1;

    UuidGenerateMethod uuid_method = 2;

    // Reserved for future configurations.
    reserved 4 to 14;

    // Method Factory configuration.
    MethodFactoryConfiguration factory_configuration = 15;
}

// Configuration of the Spine Protoc plugin.
//
// The configuration is passed to the plugin as the single option. The passed value is serialized
// and base-64 encoded.
//
message SpineProtocConfig {

    // Interfaces configuration.
    InterfacesGeneration interfaces_generation = 1;

    // Methods configuration.
    MethodsGeneration methods_generation = 2;
}

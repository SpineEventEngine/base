syntax = "proto3";

package spine.tools.protoc;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.tools.protoc";
option java_outer_classname = "ConfigProto";
option java_multiple_files = true;

option (internal_all) = true;

// Configuration of the Spine Protoc plugin.
//
// The configuration is passed to the plugin as the single option. The passed value is serialized
// and base-64 encoded.
//
message SpineProtocConfig {

    // Interfaces generation tasks.
    AddInterfaces add_interfaces = 1;

    // Methods generation tasks.
    AddMethods add_methods = 2;

    // Determines if the generation of `ValidatingBuilder` should be skipped.
    //
    // If set to `true`, message builder classes will NOT implement
    // `io.spine.protobuf.ValidatingBuilder`. Default value is `false`, i.e. the message classes
    // should implement the `ValidatingBuilder` interface.
    //
    bool skip_validating_builders = 3;

    // Determines if the validation code should be generated for the message types.
    //
    // The benefit of the generated validation code is performance. It is not required to assemble
    // metadata over all the combinations of fields and options at the program runtime.
    //
    bool generate_validation = 4;

    // Nested classes generation tasks.
    AddNestedClasses add_nested_classes = 5;

    // The classpath used to lookup factories by their fully-qualified names.
    Classpath factory_classpath = 6;
}

// Interfaces generation configuration.
message AddInterfaces {

    // UUID value interface.
    UuidConfig uuid_interface = 1;

    // Pattern-based interfaces.
    repeated ConfigByPattern interface_by_pattern = 2;

    // Entity state interface.
    EntityStateConfig entity_state_interface = 3;
}

// Methods generation configuration.
message AddMethods {

    // UUID value method factory.
    UuidConfig uuid_factory = 1;

    // Pattern-based method factories.
    repeated ConfigByPattern factory_by_pattern = 2;
}

// Nested classes generation configuration.
message AddNestedClasses {

    // A configuration of generated nested classes for queryable messages.
    QueryableConfig queryable_factory = 1;

    // A configuration of generated nested classes for subscribable messages.
    SubscribableConfig subscribable_factory = 2;

    // Pattern-based nested class factories.
    repeated ConfigByPattern factory_by_pattern = 3;
}

// UUID value code generation configuration.
//
message UuidConfig {

    // A fully-qualified name of the target.
    //
    // Currently interface name or method factory name is expected.
    //
    string value = 1;
}

// The code generation configuration for entity state messages.
//
message EntityStateConfig {

    // A fully-qualified name of the interface to mark the entity state messages with.
    //
    string value = 1;
}

// The code generation configuration for queryable messages.
//
message QueryableConfig {

    // A fully-qualified name of the target.
    //
    // Currently, only the nested class factory name is expected.
    //
    string value = 1;
}

// The code generation configuration for subscribable messages.
//
message SubscribableConfig {

    // A fully-qualified name of the target.
    //
    // Currently, only the nested class factory name is expected.
    //
    string value = 1;
}

// Code generation configuration based on the FilePattern.
//
message ConfigByPattern {


    // A fully-qualified name of the target.
    //
    // Currently interface name,method factory name or nested class factory name is expected.
    //
    string value = 1;

    // A file pattern that defines for which message types code should be generated.
    FilePattern pattern = 2;
}

// File pattern which is used to filter messages.
//
message FilePattern {

    oneof value {

        // A suffix that a .proto file's full name should end with.
        //
        // If a .proto file matches the suffix, some code generation will be applied to all its
        // messages.
        //
        string suffix = 1;

        // A prefix that a .proto file's full name should start with.
        //
        // If a .proto file matches the prefix, some code generation will be applied to all its
        // messages.
        //
        string prefix = 2;

        // A regex a .proto file's full name should match.
        //
        // If a .proto file matches the regex, some code generation will be applied to all its
        // messages.
        //
        string regex = 3;
    }
}

// A container for the java classpath items.
//
message Classpath {

    // An absolute OS-dependent path to a particular classpath JAR.
    repeated string jar = 1;
}

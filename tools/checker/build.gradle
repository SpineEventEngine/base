import org.gradle.api.resources.MissingResourceException

/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
group 'io.spine.tools'

repositories {
    maven { url = repos.sonatypeSnapshots }
}

ext {
    autoServiceVersion = '1.0-rc4'
}

dependencies {
    implementation project(':base')
    implementation project(':plugin-base')

    implementation deps.build.errorProneCore
    implementation deps.build.errorProneAnnotations

    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"

    testImplementation deps.build.errorProneTestHelpers
}

def getResolvedArtifactFor(final dependency) {
    final def resolvedTestClasspath = configurations.testRuntimeClasspath.resolvedConfiguration
    final def javacDependency = resolvedTestClasspath.resolvedArtifacts.findAll {
        it.name == dependency
    }
    if (javacDependency.empty) {
        throw new MissingResourceException("The 'javac' dependency is not found among the " +
                "resolved artifacts")
    }
    final def path = javacDependency[0].file.absolutePath
    return path
}

task acquireErrorProneJavacVersion {
    doLast {
        final def javacPath = getResolvedArtifactFor("javac")

        test {
            jvmArgs "-Xbootclasspath/p:$javacPath"
        }
    }
}

test.dependsOn acquireErrorProneJavacVersion

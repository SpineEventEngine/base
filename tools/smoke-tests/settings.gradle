/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

include 'annotator-tests'
include 'column-tests'
include 'dart-codegen-tests'
include 'known-types-tests'
include 'model-compiler-tests'
include 'rejection-tests'
include 'test-method-factory'
include 'validating-options-tests'
include 'validation-tests'

/*
 * Dependency links established with the Gradle included build.
 *
 * See the `includeBuild(...)` block below for more info.
 */
final def links = [
        'io.spine:spine-base'                    : ':base',
        'io.spine.tools:spine-tool-base'         : ':tool-base',
        'io.spine.tools:spine-model-compiler'    : ':model-compiler',
        'io.spine:spine-testlib'                 : ':testlib',
        'io.spine.tools:spine-proto-dart-plugin' : ':proto-dart-plugin'
]

/*
 * Include the `base` build into `smoke-test` project build.
 *
 * Smoke tests are built separately in order to be able to test current version of the Gradle
 * plugins.
 *
 * See the Gradle manual for more info:
 * https://docs.gradle.org/current/userguide/composite_builds.html
 */
includeBuild("$rootDir/../../") {
    dependencySubstitution {
        links.each {
            substitute module(it.key) with project(it.value)
        }
    }
}


/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

buildscript {
    ext.EXT = "$rootDir/../../ext.gradle"

    apply from: EXT
    apply from: "$rootDir/../../config/gradle/dependencies.gradle"

    repositories {
        jcenter()
        google()
        mavenCentral()
        mavenLocal()
        maven { url = repos.gradlePlugins }
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
    }


    dependencies {
        classpath deps.build.guava
        classpath (deps.build.gradlePlugins.protobuf) {
            exclude group: 'com.google.guava'
        }
        classpath (deps.build.gradlePlugins.errorProne) {
            exclude group: 'com.google.guava'
        }
        // Always use the latest (current) version of model compiler no matter
        // the global configuration.
        classpath "io.spine.tools:spine-model-compiler:$spineVersion"
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

allprojects {
    apply from: EXT
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'project-report'
}

subprojects {
    apply plugin: 'com.google.protobuf'
    apply plugin: 'io.spine.tools.spine-model-compiler'
    apply plugin: 'idea'

    dependencies {
        compile "io.spine:spine-base:$spineVersion"

        testCompile "io.spine:spine-base-testlib:$spineVersion"
    }

    idea.module {
        generatedSourceDirs += file("$projectDir/generated/main/java")
        generatedSourceDirs += file("$projectDir/generated/main/spine")

        generatedSourceDirs += file("$projectDir/generated/test/java")
        generatedSourceDirs += file("$projectDir/generated/test/spine")
    }

    sourceSets {
        main {
            proto.srcDirs "$projectDir/src/main/proto"
            java.srcDirs "$projectDir/generated/main/java",
                         "$projectDir/generated/main/spine",
                         "$projectDir/src/main/java"
            resources.srcDirs "$projectDir/generated/main/resources"
        }

        test {
            proto.srcDirs "$projectDir/src/test/proto"
            java.srcDirs "$projectDir/generated/test/java",
                         "$projectDir/generated/test/spine",
                         "$projectDir/src/test/java"
            resources.srcDirs "$projectDir/generated/test/resources"
        }
    }
}

task jacocoRootReport(dependsOn: subprojects.test, type: JacocoReport) {
    additionalSourceDirs = files(subprojects.sourceSets.main.java.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.java.srcDirs)

    // It is required to set some default value in order for the task to initialize.
    // This value is overridden in `#doFirst` section.
    classDirectories = files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = { true }
    doFirst {
        // In case some modules do not have the JaCoCo execution data files.
        executionData = files(executionData.findAll {
            it.exists()
        })

        classDirectories += files(
                subprojects*.configurations.runtime.files
                        .stream()
                        .flatMap { it.stream() }
                        .filter { it.name.endsWith('.jar') }
                        .flatMap { zipTree(it).files.stream() }
                        .filter { it.path.contains('io/spine') }
                        .toArray()
        )
    }
}

check.dependsOn jacocoRootReport

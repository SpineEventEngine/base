/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

dependencies {
    testImplementation project(':test-method-factory')
    testImplementation deps.test.truth
}

modelCompiler {

    generateInterfaces {
        filePattern().endsWith("documents.proto").markWith("io.spine.tools.protoc.DocumentMessage")
        filePattern().endsWith("events.proto").ignore()
        filePattern().startsWith("prefix_generation").markWith("io.spine.tools.protoc.PrefixedMessage")
        filePattern().endsWith("postfix_generation_test.proto")
                .markWith("io.spine.tools.protoc.PostfixedMessage")
        filePattern().regex(".*regex.*test.*")
                .markWith("io.spine.tools.protoc.RegexedMessage")
        uuidMessage().ignore()
        enrichmentMessage().markWith("io.spine.tools.protoc.TestEnrichment")
    }

    generateMethods {
        filePattern().endsWith("postfix_generation_test.proto")
                .withMethodFactory("io.spine.tools.protoc.TestMethodFactory")
        filePattern().startsWith("prefix_generation")
                .withMethodFactory("io.spine.tools.protoc.TestMethodFactory")
        filePattern().regex(".*regex.*test.*")
                .withMethodFactory("io.spine.tools.protoc.TestMethodFactory")
        uuidMessage().withMethodFactory("io.spine.tools.protoc.UuidMethodFactory")
        enrichmentMessage().ignore()
    }
}

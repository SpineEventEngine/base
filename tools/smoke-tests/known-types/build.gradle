/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
group 'io.spine.tools'

buildscript {

    // Applying from `ext.gradle` inside the `buildscript` section to reuse the properties.
    //
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `ext.gradle` explicitly here.
    apply from: "$rootDir/ext.gradle"

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }
        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    dependencies {
        classpath group: 'com.google.guava', name: 'guava', version: guavaVersion
        classpath ("com.google.protobuf:protobuf-gradle-plugin:${protobufGradlePluginVersion}") {
            // exclude old Guava version
            exclude group: 'com.google.guava'
        }
        classpath group: "io.spine.tools", name: "spine-model-compiler", version: spineToolsVersion
    }
}

apply plugin: 'com.google.protobuf'
apply plugin: spineProtobufPluginId

dependencies {
    compile project(':base')

    testCompile project(':testlib')
}

idea.module {
    generatedSourceDirs += file("${projectDir}/generated/test/java")
}

sourceSets {
    test {
        java.srcDirs "${projectDir}/src/test/java", "${projectDir}/generated/test/java"
        proto.srcDirs "${projectDir}/src/test/proto"
        resources.srcDirs "${projectDir}/generated/test/resources"
    }
}

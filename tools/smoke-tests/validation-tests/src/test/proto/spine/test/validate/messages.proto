/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.test.validation;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "ValidationTestMessagesProto";
option java_package = "io.spine.test.validate";

// Messages for testing message constraints.

message AnExternalConstraint {
    option (constraint_for) = "spine.test.validation.FirstConstraintTarget.can_be_valid," "spine.test.validate.SecondConstraintTarget.can_be_valid";

    // Redefines regex for invalid message, so it can be valid if has one more character.
    // The field index intentionally doesn't match the index in `AlwaysInvalid`
    // to test that the field is matched by name only and index doesn't considered.
    string always_invalid_a = 2 [(pattern).regex = "^.{1,}$"];
    string always_invalid_b = 1 [(pattern).regex = "^.{1,}$"];
}

message ConstraintTargetAggregate {

    FirstConstraintTarget first = 1 [(validate) = true];
    SecondConstraintTarget second = 2 [(validate) = true];
}

message FirstConstraintTarget {
    AlwaysInvalid can_be_valid = 1 [(validate) = true];
}

message SecondConstraintTarget {
    AlwaysInvalid can_be_valid = 1 [(validate) = true];
}

// A message which is always invalid according to its constraints.
//
// The field `always_invalid_a` must contain a non-empty value, but it also must match "^$" regex,
// which represents an empty string. Thus, any instance of this message type is always invalid.
//
// This message declares two fields to check that external constraints
message AlwaysInvalid {

    // A required string should not be empty, but the declared regex "^$" match
    // only an empty string, so the field is always invalid.
    string always_invalid_a = 1 [(required) = true, (pattern).regex = "^$"];

    // The second field with the same constraints as in the first field.
    string always_invalid_b = 2 [(required) = true, (pattern).regex = "^$"];
}

/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

syntax = "proto3";

package spine.test.validate.msg;

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "ValidatingBuilderTestProto";
option java_package = "io.spine.test.validate.msg.builder";

import "google/protobuf/timestamp.proto";

import "spine/options.proto";

import "spine/net/email_address.proto";
import "spine/net/url.proto";
import "spine/people/person_name.proto";

// The test definitions for the `ValidatingBuilder` tests.
//
// Use in `ValidatingBuilderTest` only

message Project {

    // The tasks contained in this project
    //
    // This field is both required and validated.
    //
    repeated Task task = 1 [(valid) = true, (required) = true];

    // The emails of the project subscribers.
    //
    // This field is validated but not required.
    repeated string subscriber_email = 2 [(valid) = true, (pattern).regex = ".+@.+\\..+"];

    // The members of the project.
    //
    // This field is required, but the contents of the messages are never validated.
    //
    repeated Member member = 3 [(required) = true];

    // A set of descriptions which are added to this project.
    //
    // This field is neither required, nor validated.
    //
    repeated string description = 4;

    // The map of the roles of the members in this project.
    //
    // This field is required but never validated.
    //
    map<string, Member> role = 5 [(required) = true, (valid) = true];

    // A map of the task IDs to the task attachments.
    //
    // This field validated but not required.
    //
    map<string, Attachment> attachment = 6 [(valid) = true, (required) = false];

    // The map of the task IDs to the time when the task was deleted.
    //
    // This field is required, but the contents of the messages are never validated.
    //
    // Note that the `when` option is redundant.
    //
    map<string, google.protobuf.Timestamp> deleted_task = 7 [(required) = true, (when).in = PAST];

    // The map of the task IDs to the labels of the task.
    //
    // This field is neither required, nor validated.
    //
    map<string, string> label = 8;
}

message Task {

    string id = 1 [(required) = true, (set_once) = true];

    string name = 2 [(required) = true];

    TaskLabel label = 3 [(set_once) = true];

    Member assignee = 4 [(set_once) = true];
}

message Member {

    string id = 1 [(required) = true];

    string name = 2 [(pattern).regex = ".+\\s+.+"];

    bytes avatar_image = 3 [(required) = true];
}

message Attachment {

    string id = 1 [(required) = true];

    string title = 2 [(required) = true, (pattern).regex = ".*\\w+.*"];

    spine.net.Url url = 3 [(required) = true, (valid) = true];
}

message EditTaskState {
    option (entity).kind = ENTITY;

    string edit_id = 1;
}

message Essay {

    // Lines that the essay consists of.
    //
    // This field is marked with `set_once`, which, for repeated fields, is not recommended,
    // and should produce a warning.
    repeated string line = 1 [(set_once) = true];

    // A table of contents.
    //
    // Maps section titles to pages.
    //
    // This field is marked with `set_once`, which, for map fields, is not recommended,
    // and should produce a warning
    map<string, int32> table_of_contents = 2 [(set_once) = true];
}

message Blizzard {
    repeated Snowflake snowflake = 1 [(distinct) = true];
}

message Constitution {
    string amendments = 1 [(distinct) = true];
}

// Artificial blizzards allow repeating snowflakes.
message ArtificialBlizzard {
    repeated Snowflake snowflake = 1 [(distinct) = false];
}

message Menu {

    string name = 1;

    oneof criterion {

        bool vegetarian = 2;

        string meat_dish = 3;
    }
}

message RequiredBooleanField {

    // should produce a warning
    bool value = 1 [(required) = true];
}

// A number between 0 and 9 incusive.
message DecimalDigit {
    int32 value = 1 [(range) = "[0..10)"];
}

// A malformed range expression, the range is not closed (as in the right edge is omitted).
message UpToInfinity {

    int32 value = 1 [(range) = "[0.."];
}

// A malformed range expression, the range is unopened (as in the left edge is omitted).
message Unopened {
    int32 value = 1 [(range) = "..2)"];
}

// A bet that has below 50% chance to win.
message UnsafeBet {
    double odds = 1 [(range) = "[0.0..0.5)"];
}

// A bet that has at least 50% chance to win.
message SafeBet {
    double odds = 1 [(range) = "[0.5..1.0]"];
}

message FrostyWeather {
    double celcius = 1 [(range) = "(-10.0..-5.5]"];
}

// This message declares a field that has a value with boundary types inconsistent to its
// value type.
message FrostyWeatherButInWholeNumber {

    // Since `celcius` is of type `double`, the boundaries cannot be of a whole
    // number type.
    double celcius = 1 [(range) = "[-10..-4)"];
}

message InconsistentBoundaries {

    // Inconsistent boundary types should result in an error.
    double value = 1 [(range) = "[0..4.2)"];
}

// This message declares a field the ranges of which have whitespaces.
message SpacedOutBoundaries{

    // The spaces in the range definition should not break the validation.
    int32 value = 1 [(range) = " [  31..32 ) "];
}

message MinorCitizen {

    // Malformed range - the value the field is `int32` - whole number, while the value of the
    // left range edge is a floating point number.
    int32 age = 1 [(range) = "(0..18.01)"];
}

// A message with a value that has a malformed range.
message IllegalRanges {
    double value = 1 [(range) = "{0.6..4.2}"];
}

// A snowflake is represented by a polygon. Two snowflakes are equal if they have the same
// amount of edges.
message Snowflake {

    int32 edges = 1;
}

enum TaskLabel {

    NO_LABEL = 0;
    OF_LITTLE_IMPORTANCE = 1;
    IMPORTANT = 2;
    CRITICAL = 3;
}

import static com.google.common.io.Files.createParentDirs

/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

group = 'io.spine.tools'

dependencies {
    api gradleApi()
    compile project(':tool-base')
    implementation deps.build.gradlePlugins.protobuf

    testImplementation project(':testlib')
    testImplementation project(':plugin-testlib')
    testImplementation deps.test.mockito
}

protobuf {
    generatedFilesBaseDir = generatedRootDir

    protoc {
        artifact = deps.build.protoc
    }

    generateProtoTasks {
        all().each { final task ->
            task.generateDescriptorSet = true
            task.descriptorSetOptions.path = "$buildDir/descriptors/${task.sourceSet.name}/known_types.desc"
        }
    }
}

/**
 * Prepares the `versions.properties` file and puts it into the resources of this project.
 *
 * <p>The file contains versions of dependencies which are configured by
 * the `ProtocConfigurationPlugin`.
 */
task prepareProtocConfigVersions {
    description = "Prepares the versions.properties file."

    final def file = file("$projectDir/generated/main/resources/versions.properties")

    outputs.file(file)

    final Properties versions = new Properties()
    versions.setProperty("baseVersion", spineBaseVersion)
    versions.setProperty("protobufVersion", deps.versions.protobuf)
    versions.setProperty("gRPCVersion", deps.versions.grpc)

    doLast {
        createParentDirs(file)
        file.createNewFile()
        file.withOutputStream { final stream ->
            versions.store(stream, "Versions of dependencies of the Model Compiler plugin and the Spine Protoc plugin.")
        }
    }
}

processResources.dependsOn prepareProtocConfigVersions

sourceSets {
    test {
        resources.srcDirs += "$sourcesRootDir/test/resources"
    }
}

//
// Copyright 2018, TeamDev. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

syntax = "proto3";

package spine.test.tools.validation.builder;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_multiple_files = true;
option java_outer_classname = "NestedMessagesProto";
option java_package = "io.spine.test.tools.validation.builder";

import "google/protobuf/timestamp.proto";

// This file defines messages for testing generation of validating builders.
//
// Use only for `VBuilderCodeTest.java`.

// A top level message with a nested message.
message VbtProcess {

    string id = 1 [(required) = true];

    // Describes the point in time related to the process.
    message Point {
        // The moment the process was started.
        google.protobuf.Timestamp time = 1 [(required) = true];

        // Who started the process.
        string initiator = 2 [(required) = true];
    }

    // A process when it appears must be already started.
    Point start = 2 [(required) = true];

    // If this field is not defined, the process is not finished.
    Point finish = 3;
}

// A message with three levels of nesting.
message VbtTree {

    string id = 1 [(required) = true];

    message Branch {

        // 3-rd level of nesting.
        message Leaf {
            string data = 1 [(required) = true];
        }

        // A branch may not have leaves.
        repeated Leaf leaf = 1;

        // A branch may have child branches.
        repeated Branch branch = 2;
    }

    // A trunc may have one or more branches.
    message Trunc {
        repeated Branch branch = 1;
    }

    // A tree mush have a trunc.
    Trunc trunc = 2 [(required) = true];
}

// A forest is one or more trees.
message VbtForest {
    repeated VbtTree tree = 1 [(required) = true];
}

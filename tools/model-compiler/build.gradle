/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

import java.nio.file.Files
import java.nio.file.StandardCopyOption

import static com.google.common.io.Files.createParentDirs

ext {
    roasterVersion = '2.20.1.Final'
    spineFolder = "${project.projectDir}/.spine" as File
    protocPluginDependency = null
}

group = 'io.spine.tools'

dependencies {
    implementation project(':plugin-base')
    implementation project(':protoc-api')

    implementation deps.gen.javaPoet

    // A library for parsing Java sources.
    // Used for parsing Java sources generated from Protobuf files
    // to make their annotation more convenient.
    implementation (group: 'org.jboss.forge.roaster', name: 'roaster-api', version: roasterVersion) {
        exclude group: 'com.google.guava'
    }
    
    implementation (group: 'org.jboss.forge.roaster', name: 'roaster-jdt', version: roasterVersion) {
        exclude group: 'com.google.guava'
    }

    implementation deps.build.gradlePlugins.protobuf

    testImplementation project(':testlib')
    testImplementation deps.test.hamcrest
    testImplementation deps.test.junitPioneer
    testImplementation gradleTestKit()
    testImplementation project(':plugin-testlib')

    // The freshest version of the plugin required for tests
    protocPluginDependency = testCompileOnly "io.spine.tools:spine-protoc-plugin:$spineVersion@jar"
}

protobuf {
    generatedFilesBaseDir = generatedRootDir

    protoc {
        artifact = deps.build.protoc
    }

    generateProtoTasks {
        all().each { final task ->
            final def scope = task.sourceSet.name
            task.generateDescriptorSet = true
            task.descriptorSetOptions.path = "$buildDir/descriptors/${scope}/io.spine.tools.spine-model-compiler-${scope}.desc"
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.includeSourceInfo = true
        }
    }
}

sourceSets {
    main {
        java.srcDirs += "$projectDir/generated/main/spine"
        resources.srcDirs += "$projectDir/generated/main/resources"
        resources.srcDirs += "$buildDir/descriptors/main"
    }
    test {
        java.srcDirs += "$projectDir/generated/test/spine"
        resources.srcDirs += "$buildDir/descriptors/test"
    }
}

final def copyPluginJarAction = {
    final def from = configurations.testCompileOnly.fileCollection(protocPluginDependency).singleFile
    final def srcPath = from.toPath()
    final def dest = project.spineFolder.toPath().resolve(from.name)
    dest.toFile().mkdirs()
    Files.copy(srcPath, dest, StandardCopyOption.REPLACE_EXISTING)
}

// We cannot use standard Copy task here as it resolves the `from` property not lazily.
// Since we use use a dependency in the `from`, it may cause some issues with the Maven plugin
// See https://discuss.gradle.org/t/right-way-to-copy-contents-from-dependency-archives/7449
task copyProtocPluginTestArtifact {
    description = "Spawns the Spine Protoc plugin artifact in the project directory for tests"
}

copyProtocPluginTestArtifact.doLast(copyPluginJarAction)
copyProtocPluginTestArtifact.dependsOn project.project(':protoc-plugin').publishToMavenLocal

// Tests use the Protobuf plugin.
test {
    dependsOn copyProtocPluginTestArtifact
    dependsOn rootProject.subprojects*.publishToMavenLocal
}

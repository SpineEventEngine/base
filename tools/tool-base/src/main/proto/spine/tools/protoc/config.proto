/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.tools.protoc;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.tools.protoc";
option java_outer_classname = "ConfigProto";
option java_multiple_files = true;

option (internal_all) = true;

import "google/protobuf/empty.proto";

// Configuration of the Spine Protoc Plugin.
//
// The configuration is passed to the plugin as the single option.
// The passed value is serialized and base-64 encoded.
//
message SpineProtocConfig {

    Validation validation = 1;

    ForEntities entities = 2;

    ForSignals commands = 3;

    ForSignals events = 4;

    ForSignals rejections = 5;

    ForMessages messages = 6;

    ForUuids uuids = 7;

    // The classpath used to lookup types by their fully-qualified names.
    Classpath classpath = 8;
}

message Validation {

    bool skip_builders = 1;

    bool skip_validation = 2;
}

message ForSignals {

    repeated FilePattern pattern = 1;

    repeated JavaClassName interface_name = 2;

    GenerateFields generate_fields = 4;
}

message ForEntities {

    repeated FilePattern pattern = 1;

    repeated ProtoOption option = 2;

    repeated JavaClassName interface_name = 3;

    GenerateFields generate_fields = 4;
}

message GenerateFields {

    oneof action {

        google.protobuf.Empty skip = 1;

        google.protobuf.Empty generate = 2;

        JavaClassName generate_with_superclass = 3;
    }
}

message ForMessages {

    FilePattern pattern = 1;

    repeated AddInterface add_interface = 2;

    repeated GenerateMethods generate_methods = 3;

    repeated GenerateNestedClasses generate_nested_classes = 4;
}

message AddInterface {

    JavaClassName name = 1;
}

message GenerateMethods {

    MethodFactory factory = 1;
}

message GenerateNestedClasses {

    NestedClassFactory factory = 1;
}

// Configures the code generation for the messages holding a UUID value.
message ForUuids {

    JavaClassName interface_name = 1;

    MethodFactory method_factory = 2;
}

// Configures the code generation for the messages representing an entity state.
message EntityStateConfig {

    // A fully-qualified name of the target.
    //
    // Currently, the interface name or field type name is expected.
    //
    string value = 1;
}

message NestedClassFactory {

    // io.spine.tools.protoc.NestedClassFactory
    JavaClassName class_name = 1;
}

message MethodFactory {

    // // io.spine.tools.protoc.MethodFactory
    JavaClassName class_name = 1;
}

message FieldName {

    string value = 1;
}

// File pattern used to filter messages residing in files.
message FilePattern {

    oneof value {

        // A suffix that a `.proto` file's full name should end with.
        //
        // If a `.proto` file matches the suffix, some code generation will be applied to
        // all its messages.
        //
        string suffix = 1;

        // A prefix that a `.proto` file's full name should start with.
        //
        // If a `.proto` file matches the prefix, some code generation will be applied to
        // all its messages.
        //
        string prefix = 2;

        // A regex a `.proto` file's full name should match.
        //
        // If a `.proto` file matches the regex, some code generation will be applied to
        // all its messages.
        //
        string regex = 3;
    }
}

// A type name pattern.
message TypePattern {

    oneof value {

        // A pattern which is used to check for a strict match between the type name and
        // the specified expected type.
        ProtoTypeName expected_type = 1;

        string regex = 2;
    }
}

message ProtoTypeName {

    string value = 1;
}

message JavaClassName {

    string canonical = 1;
}

message ProtoOption {

    string name = 1;
}

// A container for the java classpath items.
//
message Classpath {

    // An absolute OS-dependent path to a particular classpath JAR.
    repeated string jar = 1;
}

/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package io.spine.js.generate.parse;

import com.google.common.testing.NullPointerTester;
import com.google.protobuf.Descriptors.Descriptor;
import io.spine.code.js.TypeName;
import io.spine.js.generate.output.CodeLines;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static io.spine.js.generate.given.Generators.assertContains;
import static io.spine.js.generate.given.Given.message;
import static io.spine.js.generate.parse.FromJsonMethod.FROM_JSON;
import static io.spine.js.generate.parse.FromJsonMethod.FROM_JSON_ARG;
import static io.spine.js.generate.parse.FromJsonMethod.FROM_OBJECT;
import static io.spine.testing.DisplayNames.NOT_ACCEPT_NULLS;
import static java.lang.System.lineSeparator;

@SuppressWarnings("DuplicateStringLiteralInspection")
// Duplication to check the code generated by main class.
@DisplayName("MessageGenerator should")
class FromJsonMethodTest {

    private final Descriptor message = message();
    private final TypeName messageType = TypeName.from(message);
    private final FromJsonMethod generator = FromJsonMethod.createFor(message);

    @Test
    @DisplayName(NOT_ACCEPT_NULLS)
    void passNullToleranceCheck() {
        new NullPointerTester().setDefault(Descriptor.class, message)
                               .testAllPublicStaticMethods(FromJsonMethod.class);
    }

    @Test
    @DisplayName("generate `fromJson` method for message")
    void generateFromJson() {
        CodeLines snippet = generator.fromJsonMethod()
                                     .value();
        String methodDeclaration = messageType + "." + FROM_JSON;
        assertContains(snippet, methodDeclaration);
    }

    @Test
    @DisplayName("parse JSON into JS object in `fromJson` method")
    void parseJsonIntoObject() {
        CodeLines snippet = generator.fromJsonMethod()
                                     .value();
        String parseStatement = "JSON.parse(" + FROM_JSON_ARG + ')';
        assertContains(snippet, parseStatement);
    }

    @Test
    @DisplayName("generate `fromObject` method for message")
    void generateFromObject() {
        CodeLines lines = generator.fromObjectMethod()
                                   .value();
        String expected =
                messageType + "." + FROM_OBJECT + " = function(obj) {" + newLine() +
                        "  let parser = new " + TypeName.ofParser(message) + "();" + newLine() +
                        "  return parser.fromObject(obj);" + newLine() +
                        "};";
        assertContains(lines, expected);
    }

    @Test
    @DisplayName("generate a message parser")
    void checkJsObjectForNull() {
        CodeLines lines = generator.value();
        String expected = new GeneratedParser(message).value()
                                                      .toString();
        assertContains(lines, expected);
    }

    private static String newLine() {
        return lineSeparator();
    }
}

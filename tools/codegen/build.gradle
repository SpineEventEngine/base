/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

group 'io.spine.tools'

buildscript {
    apply from: "$rootDir/ext.gradle"

    ext {
        googleMavenCentralMirror = 'https://maven-central.storage.googleapis.com'
    }

    repositories {
        jcenter()
        maven { url = googleMavenCentralMirror }
        mavenCentral()
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath(group: 'com.google.protobuf',
                  name: 'protobuf-gradle-plugin',
                  version: protobufGradlePluginVersion) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
    }

    configurations.all({
        resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
    })
}

apply plugin: 'com.google.protobuf'
apply from: generateDescriptorSetScript

dependencies {
    compile project(':base')
    
    compile group: 'com.squareup', name: 'javapoet', version: javaPoetVersion

    testCompile project(':testlib')
}

protobuf {
    generatedFilesBaseDir = generatedRootDir
    protoc {
        artifact = protobufDependency
    }

    generateProtoTasks {
        all().each { final task ->
            task.descriptorSetOptions.includeSourceInfo = true
        }
    }
}

/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
syntax = "proto3";

package spine.test.tools.validate;

import "spine/options.proto";

option (type_url_prefix) = "type.spine.io";
option java_package = "io.spine.test.tools.validate";
option java_outer_classname = "FactoriesProto";
option java_multiple_files = true;

import "google/protobuf/empty.proto";

message AllFields {

    int32 int32_field = 1 [(min).value = "42"];

    int64 int64_field = 2 [(min).value = "3"];

    sfixed32 esoteric_int = 3  [(min).value = "-1"];

    string string_field = 4 [(pattern).regex = ".*"];

    bytes byte_string = 5 [(required) = true];

    float float_field = 6 [(range) = "[0.0..1.0]"];

    google.protobuf.Empty message = 7 [(.validate) = true];

    AnEnum enum = 8 [(required) = true];

    repeated string strings = 9 [(required) = true, (pattern).regex = ".+\\d.+"];

    map<int32, double> ints_to_doubles = 10 [(required) = false, (range) = "[ -100.0 .. 100.0 ]"];

    enum AnEnum {

        FIRST = 0;
        SECOND = 1;
    }
}

message WithBoolean {

    bool boolean = 1;
}

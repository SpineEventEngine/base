/*
 * Copyright 2022, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package io.spine.code.proto;

import com.google.protobuf.DescriptorProtos.FileDescriptorProto;
import com.google.protobuf.DescriptorProtos.FileDescriptorSet;
import com.google.protobuf.Descriptors.FileDescriptor;
import io.spine.io.Resource;
import io.spine.logging.Logger;
import io.spine.logging.LoggingFactory;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.util.List;
import java.util.Set;
import java.util.function.Predicate;

import static com.google.common.base.Preconditions.checkNotNull;
import static com.google.common.collect.Streams.stream;
import static io.spine.io.IoPreconditions.checkExists;
import static io.spine.util.Exceptions.newIllegalStateException;
import static io.spine.util.Predicates2.distinctBy;
import static java.lang.String.format;
import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toSet;
import static kotlin.jvm.JvmClassMappingKt.getKotlinClass;

/**
 * A utility class which allows to obtain Protobuf file descriptors.
 */
public final class FileDescriptors {

    // https://github.com/SpineEventEngine/logging/issues/33
    private static final Logger<?> logger =
            LoggingFactory.getLogger(getKotlinClass(FileDescriptors.class));

    /**
     * Extension of the descriptor set files.
     */
    public static final String DESC_EXTENSION = ".desc";

    /**
     * The name of the descriptor set file.
     *
     * <p>The file contains a {@link FileDescriptorSet} describing the Protobuf of a given module.
     *
     * <p>The file is generated by the Protobuf compiler in the build process.
     */
    public static final String KNOWN_TYPES = "known_types" + DESC_EXTENSION;

    /** Prevents instantiation of this utility class. */
    private FileDescriptors() {
    }

    /**
     * Returns descriptors of all {@code .proto} files described in the descriptor set file.
     *
     * @param descriptorSetFile
     *         the path to the file generated by the Protobuf compiler which
     *         contains descriptors of the project {@code .proto} files
     * @return a list of descriptors
     */
    public static List<FileDescriptorProto> parse(File descriptorSetFile) {
        return parseAndFilter(descriptorSetFile, descriptor -> true);
    }

    /**
     * Returns descriptors of `.proto` files described in the descriptor set file
     * which match the filter predicate.
     *
     * @param descriptorSet
     *         the file generated by the Protobuf compiler which
     *         contains descriptors of the project {@code .proto} files
     * @param filter
     *         a filter predicate to apply to the files
     * @return a list of descriptors
     */
    private static List<FileDescriptorProto>
    parseAndFilter(File descriptorSet, Predicate<FileDescriptorProto> filter) {
        checkExists(descriptorSet);
        logger.atDebug().log(() -> format(
                "Looking up for the proto files matching predicate `%s` under `%s`.",
                filter, descriptorSet));

        List<FileDescriptorProto> files;
        try (var fis = new FileInputStream(descriptorSet)) {
            var fileSet = FileDescriptorSetReader.parse(fis);
            files = fileSet.getFileList().stream()
                    .filter(filter)
                    .collect(toList());
        } catch (IOException e) {
            throw newIllegalStateException(
                    e, "Cannot get proto file descriptors. Path: `%s`.", descriptorSet
            );
        }
        logger.atDebug().log(() -> format("Found %d files.", files.size()));
        return files;
    }

    /**
     * Loads the descriptor files from the classpath.
     *
     * @return the set of {@linkplain FileDescriptorProto file descriptors}
     *         contained in the loaded files
     */
    static Set<FileDescriptorProto> load() {
        var resources = DescriptorReference.loadAll();
        var files = stream(resources)
                .map(FileDescriptors::loadFrom)
                .flatMap(set -> set.getFileList().stream())
                .filter(distinctBy(FileDescriptorProto::getName))
                .collect(toSet());
        return files;
    }

    /**
     * Reads an instance of {@link FileDescriptorSet} from the given {@link URL}.
     */
    private static FileDescriptorSet loadFrom(Resource resource) {
        checkNotNull(resource);
        return resource.exists()
               ? doLoadFrom(resource)
               : FileDescriptorSet.getDefaultInstance();
    }

    private static FileDescriptorSet doLoadFrom(Resource resource) {
        try (var stream = resource.open()) {
            var parsed = FileDescriptorSetReader.parse(stream);
            return parsed;
        } catch (IOException e) {
            throw newIllegalStateException(
                    e,
                    "Unable to load file descriptor set from `%s`.",
                    resource
            );
        }
    }

    /**
     * Tells if two descriptors represent the same file.
     */
    public static boolean sameFiles(FileDescriptor f1, FileDescriptor f2) {
        var sameName = f2.getFullName()
                         .equals(f1.getFullName());
        var samePackage = f2.getPackage()
                            .equals(f1.getPackage());
        return sameName && samePackage;
    }

    /**
     * Verifies if the passed file declares types under the "google" package.
     */
    public static boolean isGoogle(FileDescriptor file) {
        var packageName = PackageName.of(file.getPackage());
        return packageName.isGoogle();
    }
}

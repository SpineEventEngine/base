/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
buildscript {

    // As long as `buildscript` section is always evaluated first,
    // we need to apply explicitly here.
    apply from: "$rootDir/config/gradle/dependencies.gradle"
    apply from: "$rootDir/ext.gradle"

    repositories {
        jcenter()
        google()
        mavenCentral()
        mavenLocal()
        maven { url = repos.gradlePlugins }
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath deps.build.guava
        classpath (deps.build.gradlePlugins.protobuf) {
            exclude group: 'com.google.guava'
        }
        classpath (deps.build.gradlePlugins.errorProne) {
            exclude group: 'com.google.guava'
        }
    }

    configurations.all({
        resolutionStrategy {
            cacheChangingModulesFor(0, 'seconds')
            force deps.build.guava
            force deps.test.guavaTestlib
        }
    })
}

apply from: 'ext.gradle'

ext {
    credentialsPropertyFile = 'credentials.properties'

    projectsToPublish = [
        'base',
        'testlib',
        'errorprone-checks',

        // Gradle plugins
        'javadoc-filter',
        'javadoc-prettifier',
        'plugin-base',
        'reflections-plugin',
        'model-compiler',

        'plugin-testlib',

        // Protoc compiler plugin
        'protoc-plugin'
    ]
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    // Use the same version numbering for the Spine Base library.
    version = versionToPublish
}

subprojects {

    buildscript {
        apply from: "$rootDir/ext.gradle"

        repositories {
            jcenter()
            google()
            mavenCentral()
            mavenLocal()
            maven { url = repos.gradlePlugins }
            maven { url = repos.spine }
            maven { url = repos.spineSnapshots }
        }

        //noinspection GroovyAssignabilityCheck
        dependencies {
            classpath deps.build.guava
            classpath(deps.build.gradlePlugins.protobuf) {
                // exclude an old Guava version
                exclude group: 'com.google.guava'
            }
        }

        configurations.all({
            resolutionStrategy.cacheChangingModulesFor(0, 'seconds')
        })
    }

    configurations {
        // Avoid collisions of Java classes defined both in `protobuf-lite` and `protobuf-java`
        runtime.exclude group: "com.google.protobuf", module: "protobuf-lite"
        testRuntime.exclude group: "com.google.protobuf", module: "protobuf-lite"
    }

    project.ext {
        spineProtobufPluginId = 'io.spine.tools.spine-model-compiler'

        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"
    }

    apply plugin: 'java-library'
    apply plugin: 'com.google.protobuf'
    apply plugin: 'net.ltgt.errorprone'

    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Set Java home to point to JDK8 in gradle.properties file.
    //
    // For Mac OS X, it looks like this:
    //
    // # suppress inspection "UnusedProperty"
    // org.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/

    repositories {
        jcenter()

        google()
        mavenCentral()
        mavenLocal()
        maven { url = repos.gradlePlugins }
        maven { url = repos.spine }
        maven { url = repos.spineSnapshots }
    }

    dependencies {
        api deps.build.protobuf

        implementation deps.build.guava
        implementation deps.build.slf4j
        implementation deps.build.checkerAnnotations
        implementation deps.build.errorProneAnnotations
        implementation deps.build.jsr305Annotations

        testImplementation deps.test.slf4j
        testImplementation deps.test.guavaTestlib
        testImplementation deps.test.junit5Api
        testImplementation deps.test.junit5Runner
    }

    sourceSets {
        main {
            java.srcDirs generatedJavaDir, "$sourcesRootDir/main/java", generatedSpineDir
            resources.srcDirs "$sourcesRootDir/main/resources", "$generatedRootDir/main/resources"
        }
        test {
            java.srcDirs generatedTestJavaDir, "$sourcesRootDir/test/java", generatedTestSpineDir
            resources.srcDirs "$sourcesRootDir/test/resources", "$generatedRootDir/test/resources"
        }
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter', 'junit-vintage'
        }

        include "**/*Test.class", "**/*Should.class"
    }

    apply from: deps.scripts.testOutput
    apply from: deps.scripts.javadocOptions
    apply from: deps.scripts.javacArgs
    
    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from "$projectDir/build/docs/javadoc"
        classifier "javadoc"
    }

    // Apply the same IDEA module configuration for each of sub-projects.
    idea {
        module {
            generatedSourceDirs += file(generatedJavaDir)
            testSourceDirs += file(generatedTestJavaDir)
            downloadJavadoc = true
            downloadSources = true

            iml {
                beforeMerged { final module ->
                    module.dependencies.clear()
                }
                whenMerged { final module ->
                    module.dependencies*.exported = true
                }
            }
        }
    }

    task cleanGenerated(type: Delete) {
        delete = "$projectDir/generated"
    }

    clean.dependsOn cleanGenerated
}

// IDEA project configuration.
idea {
    project {
        ipr {
            beforeMerged { final project ->
                project.modulePaths.clear()
            }
            withXml { final provider ->
                provider.node.component
                        .find { it.@name == 'VcsDirectoryMappings' }
                        .mapping.@vcs = 'Git'
            }
        }
    }
}

apply from: deps.scripts.jacoco
apply from: deps.scripts.publish

/*
 * Copyright 2018, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
buildscript {

    // Applying from `ext.gradle` inside the `buildscript` section to reuse the properties.
    //
    // As long as `buildscript` section is always evaluated first, we need to apply
    // `ext.gradle` explicitly here.
    apply from: 'ext.gradle'

    repositories {
        jcenter()

        google()

        // Repository for error-prone plugin.
        maven { url = gradlePlugins }

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    //noinspection GroovyAssignabilityCheck
    dependencies {
        classpath group: 'com.google.guava', name: 'guava', version: guavaVersion
        /* Comment `changing: true` statement if you do not want the dependency to be fetched
           on each build. That will enable offline builds. */

        classpath ("net.ltgt.gradle:gradle-errorprone-plugin:$errorPronePluginVersion") {
            exclude group: 'com.google.guava'
        }

        classpath ("io.spine.tools:spine-model-compiler:$spineToolsVersion") {
            exclude group: 'com.google.guava'
        }
    }

    configurations.all({
        resolutionStrategy {
            cacheChangingModulesFor(0, 'seconds')
            force "com.google.guava:guava:$guavaVersion"
            force "com.google.guava:guava-testlib:$guavaVersion"
        }
    })
}

apply from: 'ext.gradle'

ext {
    spineCodestyleCheckerId = 'io.spine.tools.spine-codestyle-checker'
    spineJacocoScript = "${rootDir}/scripts/jacoco.gradle"

    credentialsPropertyFile = 'credentials.properties'
    publishPlugin = "$rootDir/scripts/publish.gradle"
    projectsToPublish = [
        'base',
        'testlib',

        // Gradle plugins
        'javadoc-filter',
        'javadoc-prettifier',
        'plugin-base',
        'reflections-plugin',
        'model-compiler',

        // Protoc compiler plugin
        'protoc-plugin'
    ]
}

allprojects {
    apply plugin: 'maven'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'project-report'

    // Use the same version numbering for the Spine Base library.
    version = spineVersion
}

subprojects {

    project.ext {
        protobufDependency = "com.google.protobuf:protoc:${protobufVersion}"
        spineProtobufPluginId = 'io.spine.tools.spine-model-compiler'

        sourcesRootDir = "$projectDir/src"
        generatedRootDir = "$projectDir/generated"

        generatedJavaDir = "$generatedRootDir/main/java"
        generatedTestJavaDir = "$generatedRootDir/test/java"

        generatedGrpcDir = "$generatedRootDir/main/grpc"
        generatedTestGrpcDir = "$generatedRootDir/test/grpc"

        generatedSpineDir = "$generatedRootDir/main/spine"
        generatedTestSpineDir = "$generatedRootDir/test/spine"

        testArtifactsScript = "$rootDir/scripts/test-artifacts.gradle"
        generateDescriptorSetScript = "$rootDir/scripts/generate-descriptor-set.gradle"
        filterInternalJavadocsScript = "$rootDir/scripts/no-internal-javadoc.gradle"
        gRpcScript = "$rootDir/scripts/grpc.gradle"
    }

    apply plugin: 'java'
    apply plugin: 'net.ltgt.errorprone'

    apply plugin: 'maven-publish'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    // Set Java home to point to JDK8 in gradle.properties file.
    //
    // For Mac OS X, it looks like this:
    //
    // # suppress inspection "UnusedProperty"
    // org.gradle.java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_51.jdk/Contents/Home/

    repositories {
        jcenter()

        google()

        mavenCentral()
        mavenLocal()

        // Spine releases repository.
        maven { url = spineRepository }

        // Spine snapshots repository.
        maven { url = spineSnapshotsRepository }
    }

    dependencies {
        compile "org.checkerframework:checker-qual:$checkerFrameworkVersion"

        compile "com.google.guava:guava:$guavaVersion"

        //TODO:2018-05-11:alexander.yevsyukov: Replace the below with Checker Framework
        // after Guava fully migrates from it too.
        compile "com.google.code.findbugs:jsr305:$findBugsVersion"

        compile "org.checkerframework:checker-qual:$checkerFrameworkVersion"
        compile "com.google.errorprone:error_prone_annotations:$errorProneVersion"

        testCompile "com.google.guava:guava-testlib:$guavaVersion"
    }

    sourceSets {
        main {
            java.srcDirs generatedJavaDir, "$sourcesRootDir/main/java", generatedSpineDir
            resources.srcDirs "$sourcesRootDir/main/resources", "$generatedRootDir/main/resources"
        }
        test {
            java.srcDirs generatedTestJavaDir, "$sourcesRootDir/test/java", generatedTestSpineDir
            resources.srcDirs "$sourcesRootDir/test/resources", "$generatedRootDir/test/resources"
        }
    }

    /* Uncomment this block if you need to display console output during the Gradle build.*/
    test {
        testLogging {
            // Make sure output from standard out or error is shown in Gradle output.
            showStandardStreams = true

            // Or we use events method:
            // events 'standard_out', 'standard_error'

            // Or set property events:
             events = ['standard_out', 'standard_error']

            // Instead of string values we can
            // use enum values:
            // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
            //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
        }
    }

    javadoc {
        source = sourceSets.main.allJava
    }

    tasks.withType(JavaCompile) {
        // Exclude generated sources from being analyzed by Error Prone.
        options.compilerArgs += [
                '-XepExcludedPaths:.*/generated/.*'
        ]
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allJava
        classifier "sources"
    }

    task testOutputJar(type: Jar) {
        from sourceSets.test.output
        classifier "test"
    }

    task javadocJar(type: Jar, dependsOn: 'javadoc') {
        from "$projectDir/build/docs/javadoc"
        classifier "javadoc"
    }

    // Apply the same IDEA module configuration for each of sub-projects.
    idea {
        module {
            generatedSourceDirs += file(generatedJavaDir)
            testSourceDirs += file(generatedTestJavaDir)
            downloadJavadoc = true
            downloadSources = true

            iml {
                beforeMerged { final module ->
                    module.dependencies.clear()
                }
                whenMerged { final module ->
                    module.dependencies*.exported = true
                }
            }
        }
    }
}

// IDEA project configuration.
idea {
    project {
        ipr {
            beforeMerged { final project ->
                project.modulePaths.clear()
            }
            withXml { final provider ->
                provider.node.component
                        .find { it.@name == 'VcsDirectoryMappings' }
                        .mapping.@vcs = 'Git'
            }
        }
    }
}

// Aggregated coverage report across all subprojects.
apply from: spineJacocoScript

apply from: publishPlugin

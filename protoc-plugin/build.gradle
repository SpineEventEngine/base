import java.nio.file.Files

//
// Copyright 2017, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

apply plugin: 'com.google.protobuf'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url = googleMavenCentralMirror
        }
    }
    dependencies {
        classpath(group: 'com.google.protobuf',
                name: 'protobuf-gradle-plugin',
                version: protobufGradlePluginVerison) {
            // exclude an old Guava version
            exclude group: 'com.google.guava'
        }
    }
}

group 'io.spine.tools'

dependencies {
    compile project(':base')

    compile group: "com.google.protobuf", name: "protobuf-java", version: protobufVersion
    compile group: 'com.squareup', name: 'javapoet', version: javaPoetVersion
}

protobuf {
    generatedFilesBaseDir = generatedRootDir
    protoc {
        artifact = protobufDependency
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'io.spine.tools.protoc.Plugin'
    }
    // Assemble "Fat-JAR" artifact containing all the dependencies.
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

final def shellRunner = injectVersion(file('plugin_runner.sh'))
final def batchRunner = injectVersion(file('plugin_runner.bat'))

artifacts {
    archives shellRunner
    archives batchRunner
}

publishing {
    publications {
        runnerScript(MavenPublication) {
            from components.java
            groupId = "${group}"
            artifactId = "spine-protoc-plugin"
            version = "${version}"

            [shellRunner, batchRunner].each { final script ->
                final def path = script.getAbsolutePath()
                final def ext = path.substring(path.lastIndexOf('.') + 1)
                artifact(path) {
                    classifier "script"
                    extension ext
                }
            }
        }
    }
}

/**
 * Inserts the current Spine version into the given file replacing the {@code {@literal {version}}}
 * string.
 *
 * <p>This insertion point is conventional for the runner scripts for the Spine protoc plugin.
 *
 * <p>Before the runner script is published, the version must be injected into it.
 *
 * <p>The standard Grade filtering mechanism (involving the Copy task) cannot be used in this case
 * since the injection should be performed on the configuration stage.
 *
 * @param scriptFile the script file to modify
 * @return the new script file to publish
 */
def injectVersion(File scriptFile) {
    def text = scriptFile.text
    text = text.replace("{version}", project.version)
    final def tempFile = Files.createTempFile("build", scriptFile.name.endsWith(".sh") ? ".sh" : ".bat")
    tempFile.text = text
    final result = file(tempFile.toAbsolutePath())
    return result
}

/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package js

import org.apache.tools.ant.taskdefs.condition.Os

/**
 * The script allowing to run NPM commands from Gradle.
 */


/**
 * The name of an environmental variable which contains the NPM auth token.
 *
 * <p>The token is used for publishing only.
 *
 * <p>It is required to set this variable before invoking NPM commands.
 */
ext.NPM_TOKEN_VARIABLE = "NPM_TOKEN"

/**
 * @return the value of `NPM_TOKEN` environmental variable or a stub value, if the token is not set
 */
String npmToken() {
    final def tokenVarValue = System.getenv(NPM_TOKEN_VARIABLE)
    final def token = tokenVarValue?.isEmpty() ? "PUBLISHING_FORBIDDEN" : tokenVarValue
    return token
}

/**
 * Executes the given command depending on the current OS.
 *
 * @param workingDirArg  the directory to execute the command in
 * @param windowsCommand the command to execute is the OS is Windows
 * @param unixCommand    the command to execute is the OS is Unix-like
 * @param params         the command params, platform-independent
 */
def execMultiplatform(final File workingDirArg,
                      final String windowsCommand,
                      final String unixCommand,
                      final String[] params) {
    exec {
        final String command = Os.isFamily(Os.FAMILY_WINDOWS) ? windowsCommand : unixCommand
        final List resultingParams = [command] + Arrays.asList(params)
        workingDir = workingDirArg
        commandLine = resultingParams
        environment NPM_TOKEN_VARIABLE, npmToken()
    }
}

def runNpm(final File launchDir, final String[] params) {
    execMultiplatform launchDir, 'npm.cmd', 'npm', params
}

ext {

    /**
     * Executes an {@code npm} CLI command.
     *
     * For example, to execute command {@code npm run compile}, invoke this function as follows:
     * {@code executeNpm 'run', 'compile'}
     *
     * @param params the command parameters
     */
    executeNpm = { final File from = projectDir, final String... params ->
        runNpm(from, params)
    }
}

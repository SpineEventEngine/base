/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * A script configuring the build of a JavaScript module, which is going to be published to NPM.
 *
 * <p>In particular, the script brings tasks to:
 * <ol>
 *     <li>Install NPM dependencies. 
 *     <li>Compile Protobuf sources to JavaScript.
 *     <li>Test and generate coverage reports for JavaScript sources. 
 *     <li>Update the version in `package.json` depending on the `versionToPublishJs` property. 
 *     <li>Clean up the build output of a JavaScript module. 
 * </ol>
 *
 * <p>The script is based on other scripts from `config` submodule.
 */

ext {
    srcDir = "$projectDir/main"
    testSrcDir = "$projectDir/test"
    genProtoBaseDir = projectDir
    genProtoSubDir = "proto"
    genProtoMain = "$genProtoBaseDir/main/$genProtoSubDir"
    genProtoTest = "$genProtoBaseDir/test/$genProtoSubDir"
    nycOutputDir = "$projectDir/.nyc_output"
}

apply from: "$rootDir" + io.spine.internal.gradle.Scripts.commonPath + "js/npm-publish-tasks.gradle"

/**
 * Cleans old module dependencies and build outputs.
 */
task deleteCompiled {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Cleans old module dependencies and build outputs.'

    clean.dependsOn deleteCompiled

    doLast {
        delete genProtoMain
        delete genProtoTest
        delete coverageJs.outputs
    }
}

/**
 * Customizes the task already defined in `config` module by running Webpack build.
 */
buildJs {

    outputs.dir "$projectDir/dist"
    
    doLast {
        npm 'run', 'build'
        npm 'run', 'build-dev'
    }
}

/**
 * Customizes the task already defined in `config` module by running
 * the JavaScript tests.
 */
testJs {

    doLast {
        npm 'run', 'test'
    }
}

/**
 * Copies bundled JS sources to the temporary NPM publication directory.
 */
task copyBundledJs(type: Copy) {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Copies assembled JavaScript sources to the NPM publication directory.'

    from buildJs.outputs
    into "$publicationDirectory/dist"

    dependsOn buildJs
}

/**
 * Transpiles JS sources before publishing them to NPM.
 *
 * Puts the resulting files to the temporary NPM publication directory.
 */
task transpileSources {
    group = JAVA_SCRIPT_TASK_GROUP
    description = "Transpiles sources before publishing."

    doLast {
        npm 'run', 'transpile-before-publish'
    }
}

/**
 * Defines files to copy by the task.
 */
prepareJsPublication {

    doLast {
        copy {
            from (projectDir) {
                include 'package.json'
                include '.npmrc'
            }
            into publicationDirectory
        }
    }

    //TODO:2019-02-05:dmytro.grankin: temporarily don't publish a bundle, see https://github.com/SpineEventEngine/web/issues/61
    //dependsOn copyBundledJs
    dependsOn transpileSources
}

/**
 * Runs the JavaScript tests and collects the code coverage.
 */
task coverageJs {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Runs the JS tests and collects the code coverage info.'

    outputs.dir nycOutputDir

    final def runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
    final def coverageScript = runsOnWindows ? 'coverage:win' : 'coverage:unix'

    doLast {
        npm 'run', coverageScript
    }

    dependsOn buildJs
    
    rootProject.check.dependsOn coverageJs
}

/**
 * Generates the report on NPM dependencies and their licenses.
 */
task npmLicenseReport {
    
    doLast {
        npm 'run', 'license-report'
    }
}

/**
 * Runs NPM license report straight after the Gradle license report.
 */
//TODO:2021-09-22:alexander.yevsyukov: Resolve this dependency.
//generateLicenseReport.finalizedBy npmLicenseReport

apply plugin: 'io.spine.mc-js'

protoJs {
    generatedMainDir = genProtoMain
    generatedTestDir = genProtoTest

    generateParsersTask().dependsOn compileProtoToJs
    buildJs.dependsOn generateParsersTask()
    testJs.dependsOn buildJs
}


protobuf {
    generatedFilesBaseDir = genProtoBaseDir
    protoc {
        artifact = io.spine.internal.dependency.Protobuf.compiler
    }
    generateProtoTasks {
        all().each { final task ->
            task.builtins {
                // Do not use java builtin output in this project.
                remove java

                // For information on JavaScript code generation please see
                // https://github.com/google/protobuf/blob/master/js/README.md
                js {
                    option "import_style=commonjs"
                    outputSubDir = genProtoSubDir
                }

                task.generateDescriptorSet = true
                final def testClassifier = task.sourceSet.name == "test" ? "_test" : ""
                final def descriptorName = "${project.group}_${project.name}_${project.version}${testClassifier}.desc"
                task.descriptorSetOptions.path = "${projectDir}/build/descriptors/${task.sourceSet.name}/${descriptorName}"
            }
            compileProtoToJs.dependsOn task
        }
    }
}

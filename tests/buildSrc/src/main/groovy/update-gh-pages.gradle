/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * This script publishes the generated documentation to the `spine.io` site via GitHub pages by
 * pushing commits to the `gh-pages` branch.
 *
 * To configure docs publishing, apply this script to the repositories which should generate
 * the doc:
 * ```
 * apply(from: io.spine.gradle.internal.Scripts.updateGitHubPages)
 * ```
 * After that, the `updateGitHubPages` task will be available for that project.
 *
 * By default, the non-internal Javadoc is included into the publication. It is possible to publish
 * all the Javadoc regardless of API status by setting the value of the `allowInternalJavadoc`
 * extension property to `true`. If needed, the publication may be extended to include other files.
 * To do so, append more files/file collections to the `generatedDocs` extension property.
 *
 * In order to work, the script needs a `deploy_key_rsa` private RSA key file in the repository
 * root. It is recommended to decrypt it in the repository an then decrypt it on CI upon
 * a publication. Also, the script uses the `FORMAL_GIT_HUB_PAGES_AUTHOR` environmental variable to
 * set the author email for the commits. The `gh-pages` branch itself should exist before the script
 * is run.
 */

import java.nio.file.Files

ext {
    javadocDir = Files.createTempDirectory("javadoc")
    generatedDocs = files(javadocDir)
    repositoryTempDir = Files.createTempDirectory("repoTemp")
}

/**
 * Prints a message telling those who read build logs about what happened.
 */
if (isSnapshot()) {
    println("GitHub Pages update will be skipped since this project" +
            " is a snapshot: `$project.name-$project.version`.")
}

/**
 * Tells whether this project is a snapshot.
 */
def isSnapshot() {
    return project.version.toLowerCase().contains("snapshot")
}

final String propertyName = 'allowInternalJavadoc'

final boolean allowInternalJavadoc = ext.has(propertyName) && ext.get(propertyName)

if (!allowInternalJavadoc) {
    final def commonPath = io.spine.internal.gradle.Scripts.commonPath
    apply from: "${rootDir}/${commonPath}/filter-internal-javadoc.gradle"
}

/**
 * Copies the Javadoc produced by a Javadoc task into a temporary folder.
 *
 * If `@Internal` Javadoc is allowed, uses the `:javadoc` task. Otherwise, uses
 * the `:noInternalJavadoc` task.
 *
 * To allow `@Internal` Javadoc, set `ext.allowInternalJavadoc` property to `true` before applying
 * this script to the project.
 */
task copyJavadoc(type: Copy) {
    from allowInternalJavadoc ? tasks['javadoc'] : tasks['noInternalJavadoc']
    into javadocDir
}

/**
 * Updates the Javadoc documentation on the {@code gh-pages} Git branch.
 *
 * <p>Run this task when it is required to update the Javadoc e.g. when merging a branch into
 * {@code master}.
 */
task updateGitHubPages {
    description "Updates the Javadoc published to GitHub Pages website."
    dependsOn copyJavadoc
}

/**
 * Prevents this task from execution in case this project is in its `SNAPSHOT` version.
 */
updateGitHubPages.onlyIf {
    !isSnapshot()
}

/**
 * Waits for the given {@code process} to finish and retrieves the result of execution.
 *
 * @param process the process to execute
 * @return a tuple of format: [exitCode:<Process exit code integer>,
 *                             out: <Process stdout output as a String>,
 *                             error: <Process stderr output as a String>]
 */
static def executeForResult(final Process process) {
    final def outWriter = new StringWriter()
    final def errWriter = new StringWriter()
    process.consumeProcessOutputStream(outWriter)
    process.consumeProcessErrorStream(errWriter)
    final int exitCode = process.waitFor()
    final def result = [out: outWriter.toString(), error: errWriter.toString(), exitCode: exitCode]
    return result
}

/**
 * Executes the given terminal command and retrieves the command output.
 *
 * <p>{@link Runtime#exec(String[], String[], File) Executes} the given {@code String} array as
 * a CLI command. If the execution is successful, returns the command output. Throws
 * an {@link IllegalStateException} otherwise.
 *
 * @param baseDir the directory of the command execution
 * @param command the command to execute
 * @return the command line output
 * @throws IllegalStateException upon an execution error
 */
static String execute(final File baseDir, final String... command) {
    final Runtime runtime = Runtime.getRuntime()
    final Process proc = runtime.exec(command, /*env=*/ (String[]) null, baseDir)
    final def result = executeForResult(proc)
    if (result.exitCode == 0) {
        return result.out
    } else {
        final String errorMsg = "Command `$command` finished with exit code $result.exitCode:" +
                " ${System.lineSeparator()}${result.error}" +
                " ${System.lineSeparator()}${result.out}."
        throw new IllegalStateException(errorMsg)
    }
}

/**
 * Executes the given CLI command and retrieves the command output.
 *
 * <p>This is a convenience method. Calling this method is equivalent to calling
 * {@code execute(project.rootDir, command)}.
 */
String execute(final String... command) {
    return execute(rootDir, command)
}

/**
 * The GitHub deploy key used to push the doc changes to the {@code gh-pages} branch.
 */
final File gitHubAccessKey = "$rootDir/deploy_key_rsa" as File

updateGitHubPages.doLast {
    if (!gitHubAccessKey.exists()) {
        throw new GradleException("File $gitHubAccessKey does not exist. It should be encrypted" +
                " in the repository and decrypted on CI.")
    }

    final def GH_PAGES_BRANCH = "gh-pages"

    final String repoSlug = System.getenv('REPO_SLUG')
    if (repoSlug == null || repoSlug.isEmpty()) {
        throw new GradleException('`REPO_SLUG` environmental variable is not set.')
    }

    /**
     * The GitHub URL to the project repository.
     *
     * <p>A CI instance comes with an RSA key. However, of course, the default key has no
     * privileges in Spine repositories. Thus, we add our own RSA key â€” `deploy_rsa_key`. It must
     * have write rights in the associated repository. Also, we don't want that key to be used for
     * anything else but GitHub Pages publishing. Thus, we configure the SSH agent to use
     * the `deploy_rsa_key` only for specific references, namely in `github.com-publish`.
     */
    final String GIT_HOST = "git@github.com-publish:${repoSlug}.git"

    final def repoBaseDir = "$repositoryTempDir/$GH_PAGES_BRANCH" as File
    final def docDirPostfix = "reference/$project.name"
    final def docDir = "$repoBaseDir/$docDirPostfix" as File
    final def versionedDocDir = "$docDir/v/$project.version" as File

    // Create SSH config file to allow pushing commits to the repository.
    final File sshConfigFile = file("${System.getProperty("user.home")}/.ssh/config")
    if (!sshConfigFile.exists()) {
        final File parentDir = sshConfigFile.getCanonicalFile().getParentFile()
        parentDir.mkdirs()
        sshConfigFile.createNewFile()
    }
    sshConfigFile << """
Host github.com-publish
	HostName github.com
	User git
	IdentityFile $gitHubAccessKey.absolutePath
"""
    execute "$rootDir/config/scripts/register-ssh-key.sh", gitHubAccessKey.absolutePath

    execute 'git', 'clone', GIT_HOST, "$repoBaseDir"
    execute repoBaseDir, "git", "checkout", GH_PAGES_BRANCH
    logger.debug("Updating generated documentation on GitHub Pages in directory `$docDir`.")
    docDir.mkdir()

    copy {
        from generatedDocs
        into docDir
    }

    logger.debug("Storing the new version of documentation in directory `$versionedDocDir`.")
    versionedDocDir.mkdir()
    copy {
        from generatedDocs
        into versionedDocDir
    }

    execute repoBaseDir, "git", "add", docDirPostfix

    /**
     * Publish the changes under "UpdateGitHubPages Plugin" Git user name and email stored in
     * "FORMAL_GIT_HUB_PAGES_AUTHOR" env variable.
     *
     * <p>When changing the value of "FORMAL_GIT_HUB_PAGES_AUTHOR", also change the SSH private
     * (encrypted `deploy_key_rsa`) and public ("GitHub Pages publisher (Travis CI)" on GitHub)
     * keys.
     */
    execute repoBaseDir, "git", "config", "user.name", "\"UpdateGitHubPages Plugin\""
    execute repoBaseDir, "git", "config", "user.email", System.env.FORMAL_GIT_HUB_PAGES_AUTHOR

    execute repoBaseDir, "git", "commit", "--allow-empty", "--message=\"Update Javadoc for module $project.name as for version $project.version\""
    execute repoBaseDir, "git", "push"
    logger.debug("Updated Javadoc on GitHub Pages in directory `$docDir` successfully.")
}

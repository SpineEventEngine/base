/*
 * Copyright 2019, TeamDev. All rights reserved.
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
buildscript {
    apply from: "$projectDir/../version.gradle"
    apply from: "$projectDir/../config/gradle/dependencies.gradle"

    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath deps.build.protobuf
        classpath deps.build.guava
        classpath deps.build.slf4j
        classpath deps.build.checkerAnnotations
        classpath deps.build.errorProneAnnotations
        classpath deps.build.jsr305Annotations
        classpath deps.build.errorProneAnnotations
        classpath deps.build.gradlePlugins.protobuf

        classpath deps.gen.javaPoet

        // A library for parsing Java sources.
        // Used for parsing Java sources generated from Protobuf files
        // to make their annotation more convenient.
        classpath (group: 'org.jboss.forge.roaster', name: 'roaster-api',
                   version: deps.versions.roaster) {
            exclude group: 'com.google.guava'
        }
        classpath (group: 'org.jboss.forge.roaster', name: 'roaster-jdt',
                   version: deps.versions.roaster) {
            exclude group: 'com.google.guava'
        }

        classpath files([
                "$projectDir/../tools/model-compiler/build/libs/model-compiler-${spineVersion}.jar",
                "$projectDir/../tools/plugin-base/build/libs/plugin-base-${spineVersion}.jar",
                "$projectDir/../base/build/libs/base-${spineVersion}.jar"
        ])
    }
}

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'io.spine.tools.spine-model-compiler'
apply plugin: 'idea'

repositories {
    // This defines the `libs` directory under the `base/build` project as a local repository.
    // See `dependencies` section below for definition of the dependency on the JAR
    // produced by the `base` module.
    flatDir {
        dirs "$projectDir/../base/build/libs/"
    }
    mavenLocal()
    jcenter()
}

dependencies {
    compileClasspath deps.build.protobuf
    compileClasspath deps.build.guava
    compileClasspath deps.build.slf4j
    compileClasspath deps.build.checkerAnnotations
    compileClasspath deps.build.errorProneAnnotations
    compileClasspath deps.build.jsr305Annotations
    compileClasspath deps.build.errorProneAnnotations

    // The below dependency refers to `/base/build/libs/base-{version}.jar`
    // See `repositories.flatDir` definition above.
    compileClasspath name: "base-${spineVersion}"
}

modelCompiler {
    mainProtoSrcDir = "$projectDir/../base/src/main/proto"
}

sourceSets {
    main.java.srcDirs "$projectDir/generated/main/spine"
    main.proto.srcDirs = [modelCompiler.mainProtoSrcDir]
}

protobuf {
    generateProtoTasks {
        all().each {
            it.builtins {
                remove java
            }
            it.plugins {
                remove grpc
            }
        }
    }
}

ext.buildersDir = "$projectDir/builders"

task copyCompiledClasses(type: Copy) {
    from sourceSets.main.java.outputDir
    into buildersDir

    include {
        it.isDirectory() || it.name.endsWith('VBuilder.class')
    }

    dependsOn compileJava
}

assemble.dependsOn copyCompiledClasses

build.doLast {
    final def directory = "$projectDir/../"
    final def script = runsOnWindows ? "gradlew.bat" : "gradlew"
    final def process = new ProcessBuilder()
            .command("$directory/$script".toString(), ':base:cleanJar', ':base:jar', '--console=plain')
            .directory(file(directory))
            .start()
    if (process.waitFor() != 0) {
        throw new GradleException("Unable to rebuild JAR for :base.")
    }
}

task cleanGenerated(type: Delete) {
    delete files("$projectDir/generated", "$projectDir/build", "$projectDir/.spine", buildersDir)
}

clean.dependsOn cleanGenerated

idea.module {
    generatedSourceDirs += buildersDir
}

/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package js

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

/**
 * This script declares a task to update the version in in a package.json file.
 */

/**
 * Updates the package.json version to the specified one.
 * 
 * <p>The path of the package.json and the version to set has default values,
 * but can be redefined:
 * 
 * <pre>{@code
 * updatePackageVersion.packageJsonPath = "custom/package.json"
 * updatePackageVersion.newVersion = npmPackageVersion
 * }</pre>
 */
task updatePackageVersion() {
    group = JAVA_SCRIPT_TASK_GROUP
    description = 'Updates the version in package.json.'
    
    ext.packageJsonPath = packageJsonFile
    ext.newVersion = versionToPublishJs

    doLast {
        updatePackageJsonVersion(packageJsonPath as String, newVersion as String)
    }
}

void updatePackageJsonVersion(final String packageJsonPath, final String newVersion) {
    def final packageJsonObject = readJsonFile(packageJsonPath)

    packageJsonObject['version'] = newVersion
    updatePackageJson(packageJsonObject, packageJsonPath)
}

Object readJsonFile(final String sourcePath) {
    def final packageJsonFile = file(sourcePath)
    return new JsonSlurper().parseText(packageJsonFile.text)
}

static void updatePackageJson(final jsonObject, final String destinationPath) {
    def final updatedText = JsonOutput.toJson(jsonObject)
    def final prettyText = prettify(updatedText)
    new File(destinationPath).text = prettyText
}

static String prettify(final String jsonText) {
    def prettyText = JsonOutput.prettyPrint(jsonText)
    prettyText = prettyText.replace('  ', ' ')
    prettyText = prettyText.replaceAll(/\{\s+}/, '{}')
    prettyText = prettyText + '\n'
    return prettyText
}

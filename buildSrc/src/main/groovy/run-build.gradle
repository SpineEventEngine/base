/*
 * Copyright 2021, TeamDev. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Redistribution and use in source and/or binary forms, with or without
 * modification, must retain the above copyright notice and the following
 * disclaimer.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Apply this script if it is needed to execute {@code ./gradlew clean build} task
 * from another project.
 */

configure(project.rootProject) {

    ext {

        /**
         * Executes {@code ./gradlew clean build} command, if there is a {@code 'clean'} task.
         * Otherwise, executes {@code ./gradlew build}.  
         * 
         * @param directory the project root directory in which to execute the build
         */
        runBuild = { final GString directory ->
            final boolean shouldClean = gradle.getTaskGraph().hasTask(':clean')
            final def command = []
            final def runsOnWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
            final def script = runsOnWindows ? "gradlew.bat" : "gradlew"
            command.add("$rootDir/$script".toString())
            if (shouldClean) {
                command.add('clean')
            }
            command.add('build')
            command.add('--console=plain')
            command.add('--debug')
            command.add('--stacktrace')

            // Ensure build error output log.
            // Since we're executing this task in another process, we redirect error output to
            // the file under the `build` directory.
            final File buildDir = new File(directory, "build")
            if (!buildDir.exists()) {
                buildDir.mkdir()
            }
            final File errorOut = new File(buildDir, 'error-out.txt')
            final File debugOut = new File(buildDir, 'debug-out.txt')

            final def process = new ProcessBuilder()
                    .command(command)
                    .directory(file(directory))
                    .redirectError(errorOut)
                    .redirectOutput(debugOut)
                    .start()
            if (process.waitFor() != 0) {
                throw new GradleException("Build FAILED. See $errorOut for details.")
            }
        }
    }
}

